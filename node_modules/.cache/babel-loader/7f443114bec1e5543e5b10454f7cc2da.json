{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __pow = Math.pow;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b)); // src/carousel.tsx\n\n\nimport React5, { useEffect as useEffect6, useState as useState5, useRef as useRef6, useCallback as useCallback4 } from \"react\"; // src/slide.tsx\n\nimport { useRef as useRef2, useEffect as useEffect2 } from \"react\"; // src/hooks/use-slide-intersection-observer.ts\n\nimport { useEffect, useRef, useState } from \"react\";\n\nvar useSlideIntersectionObserver = (elementRef, rootRef, callback) => {\n  const [entry, setEntry] = useState();\n  const callbackRef = useRef(callback);\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    const node = elementRef == null ? void 0 : elementRef.current;\n    const root = rootRef == null ? void 0 : rootRef.current;\n    if (!window.IntersectionObserver || !node || !root) return;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry2 => {\n        setEntry(entry2);\n        callbackRef.current(entry2);\n      });\n    }, {\n      threshold: [0.05, 0.95],\n      root\n    });\n    observer.observe(node);\n    return () => observer.disconnect();\n  }, [elementRef, rootRef]);\n  return entry;\n}; // src/slide.tsx\n\n\nimport { jsx } from \"react/jsx-runtime\";\n\nvar getSlideWidth = (count, wrapAround) => `${wrapAround ? 100 / (3 * count) : 100 / count}%`;\n\nvar getSlideStyles = (count, isCurrentSlide, isVisibleSlide, wrapAround, cellSpacing, animation, speed, zoomScale, adaptiveHeight, initializedAdaptiveHeight, slideWidth) => {\n  const width = slideWidth != null ? slideWidth : getSlideWidth(count, wrapAround);\n  const visibleSlideOpacity = isVisibleSlide ? 1 : 0;\n  const animationSpeed = animation === \"fade\" ? 200 : 500;\n  let height = \"auto\";\n\n  if (adaptiveHeight) {\n    if (initializedAdaptiveHeight) {\n      height = \"100%\";\n    } else if (isVisibleSlide) {\n      height = \"auto\";\n    } else {\n      height = \"0\";\n    }\n  }\n\n  return {\n    width,\n    height,\n    padding: `0 ${cellSpacing ? cellSpacing / 2 : 0}px`,\n    transition: animation ? `${speed || animationSpeed}ms ease 0s` : void 0,\n    transform: animation === \"zoom\" ? `scale(${isCurrentSlide && isVisibleSlide ? 1 : zoomScale || 0.85})` : void 0,\n    opacity: animation === \"fade\" ? visibleSlideOpacity : 1\n  };\n};\n\nvar generateIndex = (index, count, typeOfSlide) => {\n  if (typeOfSlide === \"prev-cloned\") {\n    return index - count;\n  }\n\n  if (typeOfSlide === \"next-cloned\") {\n    return index + count;\n  }\n\n  return index;\n};\n\nvar Slide = _ref => {\n  let {\n    count,\n    children,\n    index,\n    isCurrentSlide,\n    typeOfSlide,\n    wrapAround,\n    cellSpacing,\n    slideWidth,\n    animation,\n    speed,\n    zoomScale,\n    onVisibleSlideHeightChange,\n    adaptiveHeight,\n    initializedAdaptiveHeight,\n    updateIOEntry,\n    id,\n    carouselRef\n  } = _ref;\n\n  var _a;\n\n  const customIndex = wrapAround ? generateIndex(index, count, typeOfSlide) : index;\n  const slideRef = useRef2(null);\n  const entry = useSlideIntersectionObserver(slideRef, carouselRef, entry2 => {\n    updateIOEntry(id, (entry2 == null ? void 0 : entry2.intersectionRatio) >= 0.95);\n  });\n  const isVisible = !!(entry == null ? void 0 : entry.isIntersecting);\n  const isFullyVisible = ((_a = entry == null ? void 0 : entry.intersectionRatio) != null ? _a : 1) >= 0.95;\n  const prevIsVisibleRef = useRef2(false);\n  useEffect2(() => {\n    var _a2;\n\n    const node = slideRef.current;\n\n    if (node) {\n      const slideHeight = (_a2 = node.getBoundingClientRect()) == null ? void 0 : _a2.height;\n      const prevIsVisible = prevIsVisibleRef.current;\n\n      if (isVisible && !prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, slideHeight);\n      } else if (!isVisible && prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, null);\n      }\n\n      prevIsVisibleRef.current = isVisible;\n    }\n  }, [customIndex, isVisible, onVisibleSlideHeightChange]);\n  const currentSlideClass = isCurrentSlide && isFullyVisible ? \" slide-current\" : \"\";\n  return /* @__PURE__ */jsx(\"div\", __spreadProps(__spreadValues({\n    ref: slideRef\n  }, {\n    inert: isFullyVisible ? void 0 : \"true\"\n  }), {\n    className: `slide${currentSlideClass}${typeOfSlide ? ` ${typeOfSlide}` : \"\"}${isFullyVisible ? \" slide-visible\" : \"\"}`,\n    style: getSlideStyles(count, isCurrentSlide, isFullyVisible, wrapAround, cellSpacing, animation, speed, zoomScale, adaptiveHeight, initializedAdaptiveHeight, slideWidth),\n    children\n  }));\n};\n\nvar slide_default = Slide; // src/announce-slide.tsx\n\nimport { jsx as jsx2 } from \"react/jsx-runtime\";\nvar styles = {\n  position: \"absolute\",\n  width: \"1px\",\n  height: \"1px\",\n  overflow: \"hidden\",\n  padding: 0,\n  margin: \"-1px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  whiteSpace: \"nowrap\",\n  border: 0\n};\n\nvar AnnounceSlide = _ref2 => {\n  let {\n    message,\n    ariaLive = \"polite\"\n  } = _ref2;\n  return /* @__PURE__ */jsx2(\"div\", {\n    \"aria-live\": ariaLive,\n    \"aria-atomic\": \"true\",\n    style: styles,\n    tabIndex: -1,\n    children: message\n  });\n};\n\nvar defaultRenderAnnounceSlideMessage = _ref3 => {\n  let {\n    currentSlide,\n    count\n  } = _ref3;\n  return `Slide ${currentSlide + 1} of ${count}`;\n};\n\nvar announce_slide_default = AnnounceSlide; // src/slider-list.tsx\n\nimport React3, { useEffect as useEffect4 } from \"react\"; // src/default-controls.tsx\n\nimport { useCallback } from \"react\"; // src/types.ts\n\nvar Alignment = /* @__PURE__ */(Alignment2 => {\n  Alignment2[\"Center\"] = \"center\";\n  Alignment2[\"Right\"] = \"right\";\n  Alignment2[\"Left\"] = \"left\";\n  return Alignment2;\n})(Alignment || {});\n\nvar Directions = /* @__PURE__ */(Directions2 => {\n  Directions2[\"Next\"] = \"next\";\n  Directions2[\"Prev\"] = \"prev\";\n  Directions2[\"Up\"] = \"up\";\n  Directions2[\"Down\"] = \"down\";\n  return Directions2;\n})(Directions || {});\n\nvar Positions = /* @__PURE__ */(Positions2 => {\n  Positions2[\"TopLeft\"] = \"TopLeft\";\n  Positions2[\"TopCenter\"] = \"TopCenter\";\n  Positions2[\"TopRight\"] = \"TopRight\";\n  Positions2[\"CenterLeft\"] = \"CenterLeft\";\n  Positions2[\"CenterCenter\"] = \"CenterCenter\";\n  Positions2[\"CenterRight\"] = \"CenterRight\";\n  Positions2[\"BottomLeft\"] = \"BottomLeft\";\n  Positions2[\"BottomCenter\"] = \"BottomCenter\";\n  Positions2[\"BottomRight\"] = \"BottomRight\";\n  return Positions2;\n})(Positions || {});\n\nvar ScrollMode = /* @__PURE__ */(ScrollMode2 => {\n  ScrollMode2[\"page\"] = \"page\";\n  ScrollMode2[\"remainder\"] = \"remainder\";\n  return ScrollMode2;\n})(ScrollMode || {}); // src/utils.ts\n\n\nvar getNextMoveIndex = (scrollMode, wrapAround, currentSlide, slideCount, slidesToScroll, slidesToShow, cellAlign) => {\n  if (wrapAround) {\n    return currentSlide + slidesToScroll;\n  }\n\n  if (currentSlide >= slideCount - 1 || cellAlign === \"left\" && currentSlide >= slideCount - slidesToShow) {\n    return currentSlide;\n  }\n\n  if (scrollMode === \"remainder\"\n  /* remainder */\n  && cellAlign === \"left\") {\n    return Math.min(currentSlide + slidesToScroll, slideCount - slidesToShow);\n  }\n\n  return Math.min(currentSlide + slidesToScroll, slideCount - 1);\n};\n\nvar getPrevMoveIndex = (scrollMode, wrapAround, currentSlide, slidesToScroll, slidesToShow, cellAlign) => {\n  if (wrapAround) {\n    return currentSlide - slidesToScroll;\n  }\n\n  if (currentSlide <= 0 || cellAlign === \"right\" && currentSlide <= slidesToShow - 1) {\n    return currentSlide;\n  }\n\n  if (scrollMode === \"remainder\"\n  /* remainder */\n  && cellAlign === \"right\") {\n    return Math.max(currentSlide - slidesToScroll, slidesToShow - 1);\n  }\n\n  return Math.max(currentSlide - slidesToScroll, 0);\n};\n\nvar getDefaultSlideIndex = (slideIndex, slideCount, slidesToShow, slidesToScroll, cellAlign, autoplayReverse, scrollMode) => {\n  if (slideIndex !== void 0) {\n    return slideIndex;\n  }\n\n  const dotIndexes = getDotIndexes(slideCount, slidesToScroll, scrollMode, slidesToShow, false, cellAlign);\n  return autoplayReverse ? dotIndexes[dotIndexes.length - 1] : dotIndexes[0];\n};\n\nvar getBoundedIndex = (rawIndex, slideCount) => {\n  return (rawIndex % slideCount + slideCount) % slideCount;\n}; // src/default-controls.tsx\n\n\nimport { jsx as jsx3 } from \"react/jsx-runtime\";\n\nvar defaultButtonStyles = disabled => ({\n  border: 0,\n  background: \"rgba(0,0,0,0.4)\",\n  color: \"white\",\n  padding: 10,\n  textTransform: \"uppercase\",\n  opacity: disabled ? 0.3 : 1,\n  cursor: disabled ? \"not-allowed\" : \"pointer\"\n});\n\nvar prevButtonDisabled = _ref4 => {\n  let {\n    cellAlign,\n    currentSlide,\n    slidesToShow,\n    wrapAround\n  } = _ref4;\n\n  if (wrapAround) {\n    return false;\n  }\n\n  if (currentSlide === 0) {\n    return true;\n  }\n\n  if (cellAlign === \"right\" && currentSlide <= slidesToShow - 1) {\n    return true;\n  }\n\n  return false;\n};\n\nvar PreviousButton = _ref5 => {\n  let {\n    previousSlide,\n    defaultControlsConfig: {\n      prevButtonClassName,\n      prevButtonStyle = {},\n      prevButtonText,\n      prevButtonOnClick\n    },\n    onUserNavigation,\n    previousDisabled: disabled\n  } = _ref5;\n\n  const handleClick = event => {\n    prevButtonOnClick == null ? void 0 : prevButtonOnClick(event);\n    if (event.defaultPrevented) return;\n    onUserNavigation(event);\n    event.preventDefault();\n    previousSlide();\n  };\n\n  return /* @__PURE__ */jsx3(\"button\", {\n    className: prevButtonClassName,\n    style: __spreadValues(__spreadValues({}, defaultButtonStyles(disabled)), prevButtonStyle),\n    disabled,\n    onClick: handleClick,\n    \"aria-label\": \"previous\",\n    type: \"button\",\n    children: prevButtonText || \"Prev\"\n  });\n};\n\nvar nextButtonDisabled = _ref6 => {\n  let {\n    cellAlign,\n    currentSlide,\n    slideCount,\n    slidesToShow,\n    wrapAround\n  } = _ref6;\n\n  if (wrapAround) {\n    return false;\n  }\n\n  if (currentSlide >= slideCount - 1) {\n    return true;\n  }\n\n  if (cellAlign === \"left\" && currentSlide >= slideCount - slidesToShow) {\n    return true;\n  }\n\n  return false;\n};\n\nvar NextButton = _ref7 => {\n  let {\n    nextSlide,\n    defaultControlsConfig: {\n      nextButtonClassName,\n      nextButtonStyle = {},\n      nextButtonText,\n      nextButtonOnClick\n    },\n    nextDisabled: disabled,\n    onUserNavigation\n  } = _ref7;\n\n  const handleClick = event => {\n    nextButtonOnClick == null ? void 0 : nextButtonOnClick(event);\n    if (event.defaultPrevented) return;\n    onUserNavigation(event);\n    event.preventDefault();\n    nextSlide();\n  };\n\n  return /* @__PURE__ */jsx3(\"button\", {\n    className: nextButtonClassName,\n    style: __spreadValues(__spreadValues({}, defaultButtonStyles(disabled)), nextButtonStyle),\n    disabled,\n    onClick: handleClick,\n    \"aria-label\": \"next\",\n    type: \"button\",\n    children: nextButtonText || \"Next\"\n  });\n};\n\nvar getDotIndexes = (slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign) => {\n  const dotIndexes = [];\n  const scrollSlides = slidesToScroll <= 0 ? 1 : slidesToScroll;\n\n  if (wrapAround) {\n    for (let i = 0; i < slideCount; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === \"center\") {\n    for (let i = 0; i < slideCount - 1; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    if (slideCount > 0) {\n      dotIndexes.push(slideCount - 1);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === \"left\") {\n    if (slidesToShow >= slideCount) {\n      return [0];\n    }\n\n    const lastPossibleIndexWithoutWhitespace = slideCount - slidesToShow;\n\n    for (let i = 0; i < lastPossibleIndexWithoutWhitespace; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    if (scrollMode === \"remainder\"\n    /* remainder */\n    ) {\n      dotIndexes.push(lastPossibleIndexWithoutWhitespace);\n    } else {\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] + scrollSlides);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === \"right\") {\n    if (slidesToShow >= slideCount) {\n      return [slideCount - 1];\n    }\n\n    const firstPossibleIndexWithoutWhitespace = slidesToShow - 1;\n\n    if (scrollMode === \"remainder\"\n    /* remainder */\n    ) {\n      for (let i = firstPossibleIndexWithoutWhitespace; i < slideCount - 1; i += scrollSlides) {\n        dotIndexes.push(i);\n      }\n\n      dotIndexes.push(slideCount - 1);\n    } else {\n      for (let i = slideCount - 1; i > firstPossibleIndexWithoutWhitespace; i -= scrollSlides) {\n        dotIndexes.push(i);\n      }\n\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] - scrollSlides);\n      dotIndexes.reverse();\n    }\n\n    return dotIndexes;\n  }\n\n  return dotIndexes;\n};\n\nvar PagingDots = _ref8 => {\n  let {\n    pagingDotsIndices,\n    defaultControlsConfig: {\n      pagingDotsContainerClassName,\n      pagingDotsClassName,\n      pagingDotsStyle = {},\n      pagingDotsOnClick\n    },\n    currentSlide,\n    onUserNavigation,\n    slideCount,\n    goToSlide\n  } = _ref8;\n  const listStyles = {\n    position: \"relative\",\n    top: -10,\n    display: \"flex\",\n    margin: 0,\n    padding: 0,\n    listStyleType: \"none\"\n  };\n  const getButtonStyles = useCallback(active => ({\n    cursor: \"pointer\",\n    opacity: active ? 1 : 0.5,\n    background: \"transparent\",\n    border: \"none\",\n    fill: \"black\"\n  }), []);\n  const currentSlideBounded = getBoundedIndex(currentSlide, slideCount);\n  return /* @__PURE__ */jsx3(\"ul\", {\n    className: pagingDotsContainerClassName,\n    style: listStyles,\n    children: pagingDotsIndices.map((slideIndex, i) => {\n      const isActive = currentSlideBounded === slideIndex || // sets navigation dots active if the current slide falls in the current index range\n      currentSlideBounded < slideIndex && (i === 0 || currentSlideBounded > pagingDotsIndices[i - 1]);\n      return /* @__PURE__ */jsx3(\"li\", {\n        className: isActive ? \"paging-item active\" : \"paging-item\",\n        children: /* @__PURE__ */jsx3(\"button\", {\n          className: pagingDotsClassName,\n          type: \"button\",\n          style: __spreadValues(__spreadValues({}, getButtonStyles(isActive)), pagingDotsStyle),\n          onClick: event => {\n            pagingDotsOnClick == null ? void 0 : pagingDotsOnClick(event);\n            if (event.defaultPrevented) return;\n            onUserNavigation(event);\n            goToSlide(slideIndex);\n          },\n          \"aria-label\": `slide ${slideIndex + 1} bullet`,\n          \"aria-selected\": isActive,\n          children: /* @__PURE__ */jsx3(\"svg\", {\n            className: \"paging-dot\",\n            width: \"6\",\n            height: \"6\",\n            \"aria-hidden\": \"true\",\n            focusable: \"false\",\n            viewBox: \"0 0 6 6\",\n            children: /* @__PURE__ */jsx3(\"circle\", {\n              cx: \"3\",\n              cy: \"3\",\n              r: \"3\"\n            })\n          })\n        })\n      }, slideIndex);\n    })\n  });\n}; // src/hooks/use-tween.ts\n\n\nimport { useEffect as useEffect3, useState as useState2, useRef as useRef3 } from \"react\";\n\nvar useTween = (durationMs, easingFunction, navigationNum, shouldInterrupt) => {\n  const [normalizedTimeRaw, setNormalizedTime] = useState2(1);\n  const startTime = useRef3(Date.now());\n  const rAF = useRef3();\n  const isFirstRender = useRef3(true);\n  const lastNavigationNum = useRef3(null);\n  const normalizedTime = lastNavigationNum.current === null || lastNavigationNum.current === navigationNum || shouldInterrupt ? normalizedTimeRaw : 0;\n  useEffect3(() => {\n    lastNavigationNum.current = navigationNum;\n\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    if (shouldInterrupt) {\n      return;\n    }\n\n    startTime.current = Date.now();\n    setNormalizedTime(0);\n\n    const tick = () => {\n      rAF.current = requestAnimationFrame(() => {\n        const currentTime = Date.now();\n        const normalizedTime2 = Math.min(1, (currentTime - startTime.current) / durationMs);\n        setNormalizedTime(normalizedTime2);\n\n        if (normalizedTime2 < 1) {\n          tick();\n        } else {\n          rAF.current = void 0;\n        }\n      });\n    };\n\n    tick();\n    return () => {\n      if (rAF.current !== void 0) {\n        cancelAnimationFrame(rAF.current);\n        setNormalizedTime(1);\n      }\n    };\n  }, [navigationNum, durationMs, shouldInterrupt]);\n  return {\n    isAnimating: normalizedTime !== 1,\n    value: easingFunction(normalizedTime)\n  };\n}; // src/slider-list.tsx\n\n\nimport { jsx as jsx4 } from \"react/jsx-runtime\";\n\nvar getPercentOffsetForSlide = (currentSlide, slideCount, slidesToShow, cellAlign, wrapAround) => {\n  const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n  const singleSlidePercentOfWhole = 100 / renderedSlideCount;\n  let slide0Offset = wrapAround ? -100 / 3 : 0;\n\n  if (cellAlign === \"right\" && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    slide0Offset += singleSlidePercentOfWhole * excessSlides;\n  }\n\n  if (cellAlign === \"center\" && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    const excessLeftSlides = excessSlides / 2;\n    slide0Offset += singleSlidePercentOfWhole * excessLeftSlides;\n  }\n\n  const currentSlideOffsetFrom0 = 100 / renderedSlideCount * currentSlide;\n  return slide0Offset - currentSlideOffsetFrom0;\n};\n\nvar SliderList = React3.forwardRef((_ref9, forwardedRef) => {\n  let {\n    animation,\n    animationDistance,\n    cellAlign,\n    children,\n    currentSlide,\n    disableAnimation,\n    disableEdgeSwiping,\n    draggedOffset,\n    easing,\n    edgeEasing,\n    isDragging,\n    scrollMode,\n    slideCount,\n    slidesToScroll,\n    slidesToShow,\n    speed,\n    wrapAround,\n    slideWidth,\n    setIsAnimating\n  } = _ref9;\n  const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n  const listVisibleWidth = slideWidth ? `calc(${slideWidth} * ${renderedSlideCount})` : `${renderedSlideCount * 100 / slidesToShow}%`;\n  const percentOffsetForSlideProps = [slideCount, slidesToShow, cellAlign, wrapAround];\n  const dotIndexes = getDotIndexes(slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign);\n  let clampedDraggedOffset = `${draggedOffset}px`;\n\n  if (isDragging && disableEdgeSwiping && !wrapAround) {\n    const clampOffsets = [dotIndexes[0], dotIndexes[dotIndexes.length - 1]].map(index => getPercentOffsetForSlide(index, ...percentOffsetForSlideProps));\n    clampedDraggedOffset = `clamp(${clampOffsets[1]}%, ${draggedOffset}px, ${clampOffsets[0]}%)`;\n  }\n\n  const slideBasedOffset = getPercentOffsetForSlide(currentSlide, ...percentOffsetForSlideProps);\n  const isEdgeEasing = !disableEdgeSwiping && !wrapAround && (currentSlide === dotIndexes[0] && animationDistance < 0 || currentSlide === dotIndexes[dotIndexes.length - 1] && animationDistance > 0);\n  const {\n    value: transition,\n    isAnimating\n  } = useTween(speed, !isEdgeEasing ? easing : edgeEasing, // animationDistance is assumed to be unique enough that it can be used to\n  // detect when a new animation should start. This is used in addition to\n  // currentSlide because some animations, such as those with edgeEasing, do\n  // not occur due to a change in value of currentSlide\n  currentSlide + animationDistance, isDragging || disableAnimation || animation === \"fade\");\n  let positioning;\n\n  if (isDragging || slideBasedOffset !== 0 || isAnimating) {\n    if (isDragging) {\n      positioning = `translateX(${clampedDraggedOffset})`;\n    } else {\n      const transitionOffset = isAnimating ? (1 - transition) * animationDistance : 0;\n      positioning = `translateX(calc(${slideBasedOffset}% - ${transitionOffset}px))`;\n    }\n  }\n\n  useEffect4(() => {\n    setIsAnimating(isAnimating);\n  }, [isAnimating, setIsAnimating]);\n  return /* @__PURE__ */jsx4(\"div\", {\n    ref: forwardedRef,\n    className: \"slider-list\",\n    style: {\n      width: listVisibleWidth,\n      textAlign: \"left\",\n      userSelect: \"auto\",\n      transform: positioning,\n      display: \"flex\"\n    },\n    children\n  });\n});\nSliderList.displayName = \"SliderList\"; // src/controls.tsx\n\nimport { Fragment } from \"react\"; // src/control-styles.ts\n\nvar commonStyles = {\n  position: \"absolute\",\n  display: \"flex\",\n  zIndex: 1,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0\n};\n\nvar getControlContainerFlexStyles = pos => {\n  let alignItems;\n\n  switch (pos) {\n    case \"TopLeft\"\n    /* TopLeft */\n    :\n    case \"TopCenter\"\n    /* TopCenter */\n    :\n    case \"TopRight\"\n    /* TopRight */\n    :\n      alignItems = \"flex-start\";\n      break;\n\n    case \"CenterLeft\"\n    /* CenterLeft */\n    :\n    case \"CenterCenter\"\n    /* CenterCenter */\n    :\n    case \"CenterRight\"\n    /* CenterRight */\n    :\n      alignItems = \"center\";\n      break;\n\n    case \"BottomLeft\"\n    /* BottomLeft */\n    :\n    case \"BottomCenter\"\n    /* BottomCenter */\n    :\n    case \"BottomRight\"\n    /* BottomRight */\n    :\n      alignItems = \"flex-end\";\n      break;\n  }\n\n  let justifyContent;\n\n  switch (pos) {\n    case \"TopLeft\"\n    /* TopLeft */\n    :\n    case \"CenterLeft\"\n    /* CenterLeft */\n    :\n    case \"BottomLeft\"\n    /* BottomLeft */\n    :\n      justifyContent = \"flex-start\";\n      break;\n\n    case \"TopCenter\"\n    /* TopCenter */\n    :\n    case \"CenterCenter\"\n    /* CenterCenter */\n    :\n    case \"BottomCenter\"\n    /* BottomCenter */\n    :\n      justifyContent = \"center\";\n      break;\n\n    case \"TopRight\"\n    /* TopRight */\n    :\n    case \"CenterRight\"\n    /* CenterRight */\n    :\n    case \"BottomRight\"\n    /* BottomRight */\n    :\n      justifyContent = \"flex-end\";\n      break;\n  }\n\n  return {\n    alignItems,\n    justifyContent\n  };\n};\n\nvar getControlContainerStyles = pos => {\n  return __spreadValues(__spreadValues({}, getControlContainerFlexStyles(pos)), commonStyles);\n}; // src/controls.tsx\n\n\nimport { jsx as jsx5 } from \"react/jsx-runtime\";\nvar controlsMap = [{\n  funcName: \"renderTopLeftControls\",\n  key: \"TopLeft\"\n  /* TopLeft */\n\n}, {\n  funcName: \"renderTopCenterControls\",\n  key: \"TopCenter\"\n  /* TopCenter */\n\n}, {\n  funcName: \"renderTopRightControls\",\n  key: \"TopRight\"\n  /* TopRight */\n\n}, {\n  funcName: \"renderCenterLeftControls\",\n  key: \"CenterLeft\"\n  /* CenterLeft */\n\n}, {\n  funcName: \"renderCenterCenterControls\",\n  key: \"CenterCenter\"\n  /* CenterCenter */\n\n}, {\n  funcName: \"renderCenterRightControls\",\n  key: \"CenterRight\"\n  /* CenterRight */\n\n}, {\n  funcName: \"renderBottomLeftControls\",\n  key: \"BottomLeft\"\n  /* BottomLeft */\n\n}, {\n  funcName: \"renderBottomCenterControls\",\n  key: \"BottomCenter\"\n  /* BottomCenter */\n\n}, {\n  funcName: \"renderBottomRightControls\",\n  key: \"BottomRight\"\n  /* BottomRight */\n\n}];\n\nvar renderControls = (props, slideCount, currentSlide, goToSlide, nextSlide, prevSlide, slidesToScroll) => {\n  if (props.withoutControls) {\n    return null;\n  }\n\n  const disableCheckProps = __spreadProps(__spreadValues({}, props), {\n    currentSlide,\n    slideCount\n  });\n\n  const nextDisabled = nextButtonDisabled(disableCheckProps);\n  const previousDisabled = prevButtonDisabled(disableCheckProps);\n  const pagingDotsIndices = getDotIndexes(slideCount, slidesToScroll, props.scrollMode, props.slidesToShow, props.wrapAround, props.cellAlign);\n  return controlsMap.map(control => {\n    var _a;\n\n    if (!props[control.funcName] || typeof props[control.funcName] !== \"function\") {\n      return /* @__PURE__ */jsx5(Fragment, {}, control.funcName);\n    }\n\n    return /* @__PURE__ */jsx5(\"div\", {\n      style: __spreadProps(__spreadValues({}, getControlContainerStyles(control.key)), {\n        pointerEvents: \"none\"\n      }),\n      children: /* @__PURE__ */jsx5(\"div\", {\n        className: [`slider-control-${control.key.toLowerCase()}`, props.defaultControlsConfig.containerClassName || \"\"].join(\" \").trim(),\n        style: {\n          pointerEvents: \"auto\"\n        },\n        children: (_a = props[control.funcName]) == null ? void 0 : _a.call(props, {\n          cellAlign: props.cellAlign,\n          cellSpacing: props.cellSpacing,\n          currentSlide,\n          defaultControlsConfig: props.defaultControlsConfig || {},\n          pagingDotsIndices,\n          goToSlide,\n          nextDisabled,\n          nextSlide,\n          onUserNavigation: props.onUserNavigation,\n          previousDisabled,\n          previousSlide: prevSlide,\n          scrollMode: props.scrollMode,\n          slideCount,\n          slidesToScroll,\n          slidesToShow: props.slidesToShow || 1,\n          vertical: props.vertical,\n          wrapAround: props.wrapAround\n        })\n      })\n    }, control.funcName);\n  });\n};\n\nvar controls_default = renderControls; // src/default-carousel-props.tsx\n\nimport { Fragment as Fragment2, jsx as jsx6 } from \"react/jsx-runtime\";\n\nvar easeOut = t => __pow(t - 1, 3) + 1;\n\nvar defaultProps = {\n  adaptiveHeight: false,\n  adaptiveHeightAnimation: true,\n  afterSlide: () => {},\n  autoplay: false,\n  autoplayInterval: 3e3,\n  autoplayReverse: false,\n  beforeSlide: () => {},\n  cellAlign: \"left\",\n  cellSpacing: 0,\n  defaultControlsConfig: {},\n  disableAnimation: false,\n  disableEdgeSwiping: false,\n  dragging: true,\n  dragThreshold: 0.5,\n  easing: easeOut,\n  edgeEasing: easeOut,\n  enableKeyboardControls: false,\n  frameAriaLabel: \"carousel-slider\",\n  keyCodeConfig: {\n    nextSlide: [39, 68, 38, 87],\n    previousSlide: [37, 65, 40, 83],\n    firstSlide: [81],\n    lastSlide: [69],\n    pause: [32]\n  },\n  onDragStart: () => {},\n  onDrag: () => {},\n  onDragEnd: () => {},\n  onUserNavigation: () => {},\n  pauseOnHover: true,\n  renderAnnounceSlideMessage: defaultRenderAnnounceSlideMessage,\n  renderBottomCenterControls: props => /* @__PURE__ */jsx6(PagingDots, __spreadValues({}, props)),\n  renderCenterLeftControls: props => /* @__PURE__ */jsx6(PreviousButton, __spreadValues({}, props)),\n  renderCenterRightControls: props => /* @__PURE__ */jsx6(NextButton, __spreadValues({}, props)),\n  scrollMode: \"page\"\n  /* page */\n  ,\n  slidesToScroll: 1,\n  slidesToShow: 1,\n  speed: 500,\n  style: {},\n  swiping: true,\n  vertical: false,\n  withoutControls: false,\n  wrapAround: false,\n  children: /* @__PURE__ */jsx6(Fragment2, {})\n};\nvar default_carousel_props_default = defaultProps; // src/hooks/use-frame-height.ts\n\nimport { useCallback as useCallback3, useMemo, useState as useState4 } from \"react\"; // src/hooks/use-state-with-ref.ts\n\nimport { useCallback as useCallback2, useRef as useRef4, useState as useState3 } from \"react\";\n\nvar useStateWithRef = initialState => {\n  const [value, setValue] = useState3(initialState);\n  const valueRef = useRef4(initialState);\n  const setValueAndRef = useCallback2(newValue => {\n    valueRef.current = newValue;\n    setValue(newValue);\n  }, []);\n  return [value, setValueAndRef, valueRef];\n}; // src/hooks/use-frame-height.ts\n\n\nvar useFrameHeight = (adaptiveHeight, slidesToShow, slideCount) => {\n  const [visibleHeights, setVisibleHeights, visibleHeightsRef] = useStateWithRef([]);\n  const [initializedAdaptiveHeight, setInitializedAdaptiveHeight] = useState4(false);\n  const handleVisibleSlideHeightChange = useCallback3((slideIndex, height) => {\n    const latestVisibleHeights = visibleHeightsRef.current;\n    let newVisibleHeights;\n\n    if (height === null) {\n      newVisibleHeights = latestVisibleHeights.filter(slideHeight => slideHeight.slideIndex !== slideIndex);\n    } else {\n      newVisibleHeights = [...latestVisibleHeights, {\n        slideIndex,\n        height\n      }];\n    }\n\n    setVisibleHeights(newVisibleHeights);\n\n    if (newVisibleHeights.length >= Math.min(slideCount, Math.ceil(slidesToShow))) {\n      setInitializedAdaptiveHeight(true);\n    }\n  }, [slideCount, setVisibleHeights, slidesToShow, visibleHeightsRef]);\n  const frameHeight = useMemo(() => {\n    if (adaptiveHeight) {\n      if (!initializedAdaptiveHeight) {\n        return \"auto\";\n      }\n\n      const maxHeight = Math.max(0, ...visibleHeights.map(height => height.height));\n      return `${maxHeight}px`;\n    } else {\n      return \"auto\";\n    }\n  }, [adaptiveHeight, initializedAdaptiveHeight, visibleHeights]);\n  return {\n    handleVisibleSlideHeightChange,\n    frameHeight,\n    initializedAdaptiveHeight\n  };\n}; // src/hooks/use-forward-ref.ts\n\n\nimport { useEffect as useEffect5, useRef as useRef5 } from \"react\";\n\nvar useForwardRef = ref => {\n  const targetRef = useRef5(null);\n  useEffect5(() => {\n    if (!ref) return;\n\n    if (typeof ref === \"function\") {\n      ref(targetRef.current);\n    } else {\n      ref.current = targetRef.current;\n    }\n  }, [ref]);\n  return targetRef;\n}; // src/carousel.tsx\n\n\nimport { jsx as jsx7, jsxs } from \"react/jsx-runtime\";\nvar Carousel = React5.forwardRef((rawProps, ref) => {\n  const props = rawProps;\n  const {\n    adaptiveHeight,\n    adaptiveHeightAnimation,\n    afterSlide,\n    animation,\n    autoplay,\n    autoplayInterval,\n    autoplayReverse,\n    beforeSlide,\n    cellAlign: propsCellAlign,\n    cellSpacing,\n    children,\n    className,\n    disableAnimation,\n    dragging: desktopDraggingEnabled,\n    dragThreshold: propsDragThreshold,\n    enableKeyboardControls,\n    frameAriaLabel,\n    keyCodeConfig,\n    onDrag,\n    onDragEnd,\n    onDragStart,\n    onUserNavigation,\n    pauseOnHover,\n    renderAnnounceSlideMessage,\n    scrollMode: propsScrollMode,\n    slideIndex,\n    slidesToScroll: propsSlidesToScroll,\n    slidesToShow: propsSlidesToShow,\n    slideWidth,\n    speed,\n    style,\n    swiping: mobileDraggingEnabled,\n    wrapAround,\n    zoomScale\n  } = props;\n  const filteredSlides = React5.Children.toArray(children).filter(Boolean);\n  const slideCount = filteredSlides.length;\n  const cellAlign = slideWidth || propsSlidesToScroll === \"auto\" ? \"left\" : propsCellAlign;\n  const scrollMode = propsSlidesToScroll === \"auto\" ? \"remainder\"\n  /* remainder */\n  : propsScrollMode;\n  const [slideIOEntries, setSlideIOEntries] = useState5( /* @__PURE__ */new Map());\n  const visibleCount = Array.from(slideIOEntries).filter(_ref10 => {\n    let [, visible] = _ref10;\n    return visible;\n  }).length;\n  const [constantVisibleCount, setConstantVisibleCount] = useState5(visibleCount);\n  const slidesToShow = slideWidth ? constantVisibleCount : propsSlidesToShow;\n  const slidesToScroll = animation === \"fade\" ? slidesToShow : propsSlidesToScroll === \"auto\" ? Math.max(constantVisibleCount, 1) : propsSlidesToScroll;\n  const [currentSlide, setCurrentSlide] = useState5(() => getDefaultSlideIndex(slideIndex, slideCount, slidesToShow, slidesToScroll, cellAlign, autoplayReverse, scrollMode));\n  const [pause, setPause] = useState5(false);\n  const [isDragging, setIsDragging] = useState5(false);\n  const [dragDistance, setDragDistance] = useState5(0);\n  const [animationDistance, setAnimationDistance] = useState5(0);\n  const [isAnimating, setIsAnimating] = useState5(false);\n  const updateSlideIOEntry = useCallback4((id, isFullyVisible) => {\n    if (!!slideIOEntries.get(id) === isFullyVisible) return;\n    setSlideIOEntries(prev => {\n      const newMap = new Map(prev);\n      newMap.set(id, isFullyVisible);\n      return newMap;\n    });\n  }, [slideIOEntries]);\n  const prevDragged = useRef6(false);\n  useEffect6(() => {\n    if (isDragging) prevDragged.current = true;\n\n    if (!(isDragging || isAnimating)) {\n      if (!prevDragged.current) setConstantVisibleCount(visibleCount);\n      prevDragged.current = false;\n    }\n  }, [isAnimating, isDragging, visibleCount]);\n  const prevXPosition = useRef6(null);\n  const preDragOffset = useRef6(0);\n  const sliderListRef = useRef6(null);\n  const defaultCarouselRef = useRef6(null);\n  const autoplayTimeout = useRef6();\n  const autoplayLastTriggeredRef = useRef6(null);\n  const isMounted = useRef6(true);\n  const setSliderListRef = useCallback4(node => {\n    if (node) {\n      node.querySelectorAll(\".slider-list img\").forEach(el => el.setAttribute(\"draggable\", \"false\"));\n    }\n\n    sliderListRef.current = node;\n  }, []);\n  useEffect6(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  const forwardedRef = useForwardRef(ref);\n  const carouselRef = forwardedRef || defaultCarouselRef;\n  const goToSlide = useCallback4(targetSlideUnbounded => {\n    if (!sliderListRef.current || !carouselRef.current) return;\n    const targetSlideBounded = getBoundedIndex(targetSlideUnbounded, slideCount);\n    const slideChanged = targetSlideUnbounded !== currentSlide;\n    slideChanged && beforeSlide(currentSlide, targetSlideBounded);\n    const currentOffset = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n    const sliderWidth = sliderListRef.current.offsetWidth;\n    let targetOffset = getPercentOffsetForSlide(targetSlideBounded, slideCount, slidesToShow, cellAlign, wrapAround) / 100 * sliderWidth;\n\n    if (wrapAround) {\n      const slideSetWidth = sliderWidth / 3;\n\n      if (targetSlideUnbounded < 0) {\n        targetOffset += slideSetWidth;\n      }\n\n      if (targetSlideUnbounded >= slideCount) {\n        targetOffset -= slideSetWidth;\n      }\n    }\n\n    setAnimationDistance(targetOffset - currentOffset);\n\n    if (slideChanged) {\n      setCurrentSlide(targetSlideBounded);\n      const msToEndOfAnimation = !disableAnimation ? speed || 500 : 40;\n      setTimeout(() => {\n        if (!isMounted.current) return;\n        afterSlide(targetSlideBounded);\n      }, msToEndOfAnimation);\n    }\n  }, [afterSlide, beforeSlide, carouselRef, cellAlign, currentSlide, disableAnimation, speed, slideCount, slidesToShow, wrapAround]);\n  const nextSlide = useCallback4(() => {\n    const nextSlideIndex = getNextMoveIndex(scrollMode, wrapAround, currentSlide, slideCount, slidesToScroll, slidesToShow, cellAlign);\n\n    if (currentSlide !== nextSlideIndex) {\n      goToSlide(nextSlideIndex);\n    }\n  }, [cellAlign, currentSlide, goToSlide, slidesToScroll, scrollMode, slideCount, slidesToShow, wrapAround]);\n  const prevSlide = useCallback4(() => {\n    const prevSlideIndex = getPrevMoveIndex(scrollMode, wrapAround, currentSlide, slidesToScroll, slidesToShow, cellAlign);\n\n    if (currentSlide !== prevSlideIndex) {\n      goToSlide(prevSlideIndex);\n    }\n  }, [cellAlign, currentSlide, goToSlide, slidesToScroll, scrollMode, slidesToShow, wrapAround]);\n  const prevMovedToSlideIndex = useRef6(slideIndex);\n  useEffect6(() => {\n    if (slideIndex !== void 0 && slideIndex !== prevMovedToSlideIndex.current && !autoplayReverse) {\n      goToSlide(slideIndex);\n      prevMovedToSlideIndex.current = slideIndex;\n    }\n  }, [slideIndex, autoplayReverse, goToSlide]);\n  useEffect6(() => {\n    let pauseStarted = null;\n\n    if (pause) {\n      pauseStarted = Date.now();\n    }\n\n    return () => {\n      if (pauseStarted !== null && autoplayLastTriggeredRef.current !== null) {\n        autoplayLastTriggeredRef.current += Date.now() - pauseStarted;\n      }\n    };\n  }, [pause]);\n  useEffect6(() => {\n    if (autoplay && !pause) {\n      const adjustedTimeoutMs = autoplayLastTriggeredRef.current !== null ? autoplayInterval - (Date.now() - autoplayLastTriggeredRef.current) : autoplayInterval;\n      autoplayTimeout.current = setTimeout(() => {\n        autoplayLastTriggeredRef.current = Date.now();\n\n        if (autoplayReverse) {\n          prevSlide();\n        } else {\n          nextSlide();\n        }\n      }, adjustedTimeoutMs);\n    }\n\n    if (autoplay && pause) {\n      clearTimeout(autoplayTimeout.current);\n    }\n\n    return () => {\n      clearTimeout(autoplayTimeout.current);\n    };\n  }, [pause, autoplay, autoplayInterval, autoplayReverse, prevSlide, nextSlide]);\n\n  const onKeyDown = event => {\n    let keyCommand = null;\n    Object.keys(keyCodeConfig).forEach(command => {\n      var _a;\n\n      if ((_a = keyCodeConfig[command]) == null ? void 0 : _a.includes(event.keyCode)) {\n        keyCommand = command;\n      }\n    });\n    if (keyCommand === null) return;\n    event.preventDefault();\n    event.stopPropagation();\n\n    switch (keyCommand) {\n      case \"nextSlide\":\n        onUserNavigation(event);\n        nextSlide();\n        break;\n\n      case \"previousSlide\":\n        onUserNavigation(event);\n        prevSlide();\n        break;\n\n      case \"firstSlide\":\n      case \"lastSlide\":\n        {\n          onUserNavigation(event);\n          const dotIndices = getDotIndexes(slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign);\n\n          if (keyCommand === \"firstSlide\") {\n            goToSlide(dotIndices[0]);\n          } else {\n            goToSlide(dotIndices[dotIndices.length - 1]);\n          }\n\n          break;\n        }\n\n      case \"pause\":\n        setPause(p => !p);\n        break;\n    }\n  };\n\n  const dragPositions = useRef6([]);\n\n  const handleDragEnd = e => {\n    if (!isDragging || !carouselRef.current) return;\n    setIsDragging(false);\n    let distanceFromInertia = 0;\n\n    if (dragPositions.current.length > 1) {\n      const startMove = dragPositions.current[0];\n      const endMove = dragPositions.current[dragPositions.current.length - 1];\n      const timeOffset = endMove.time - startMove.time;\n      const goodInertiaFeelConstant = 9;\n      const goodFrictionFeelConstant = 0.92;\n      const initialVelocity = goodInertiaFeelConstant * Math.abs((endMove.pos - startMove.pos) / timeOffset);\n      let velocity = initialVelocity;\n\n      while (Math.abs(velocity) > 1) {\n        distanceFromInertia += velocity;\n        velocity *= goodFrictionFeelConstant;\n      }\n    }\n\n    dragPositions.current = [];\n    const adjustedDragDistance = Math.abs(dragDistance) + Math.abs(distanceFromInertia);\n    onDragEnd(e);\n    prevXPosition.current = null;\n    setDragDistance(0);\n    const oneScrollWidth = carouselRef.current.offsetWidth * Math.min(1, slidesToScroll / slidesToShow);\n    const dragThreshold = oneScrollWidth * propsDragThreshold;\n\n    if (adjustedDragDistance < dragThreshold) {\n      goToSlide(currentSlide);\n      return;\n    }\n\n    const canMaintainVisualContinuity = slidesToShow >= 2 * slidesToScroll;\n    const timesToMove = canMaintainVisualContinuity ? 1 + Math.floor((adjustedDragDistance - dragThreshold) / oneScrollWidth) : 1;\n    let nextSlideIndex = currentSlide;\n\n    for (let index = 0; index < timesToMove; index += 1) {\n      if (dragDistance > 0) {\n        nextSlideIndex = getNextMoveIndex(scrollMode, wrapAround, nextSlideIndex, slideCount, slidesToScroll, slidesToShow, cellAlign);\n      } else {\n        nextSlideIndex = getPrevMoveIndex(scrollMode, wrapAround, nextSlideIndex, slidesToScroll, slidesToShow, cellAlign);\n      }\n    }\n\n    if (nextSlideIndex !== currentSlide) {\n      onUserNavigation(e);\n    }\n\n    goToSlide(nextSlideIndex);\n  };\n\n  const onTouchStart = useCallback4(e => {\n    if (!mobileDraggingEnabled || !sliderListRef.current || !carouselRef.current) {\n      return;\n    }\n\n    setIsDragging(true);\n    preDragOffset.current = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n    onDragStart(e);\n  }, [carouselRef, onDragStart, mobileDraggingEnabled]);\n  const handlePointerMove = useCallback4(xPosition => {\n    if (!isDragging) return;\n    const isFirstMove = prevXPosition.current === null;\n    const delta = prevXPosition.current !== null ? xPosition - prevXPosition.current : 0;\n    const nextDragDistance = dragDistance + delta;\n    const now = Date.now();\n\n    while (dragPositions.current.length > 0) {\n      if (now - dragPositions.current[0].time <= 100) {\n        break;\n      }\n\n      dragPositions.current.shift();\n    }\n\n    dragPositions.current.push({\n      pos: nextDragDistance,\n      time: now\n    });\n\n    if (!isFirstMove) {\n      setDragDistance(nextDragDistance);\n    }\n\n    prevXPosition.current = xPosition;\n  }, [isDragging, dragDistance]);\n  const onTouchMove = useCallback4(e => {\n    if (!isDragging || !carouselRef.current) return;\n    onDragStart(e);\n    const moveValue = carouselRef.current.offsetWidth - e.touches[0].pageX;\n    handlePointerMove(moveValue);\n  }, [isDragging, carouselRef, handlePointerMove, onDragStart]);\n  const onMouseDown = useCallback4(e => {\n    if (!desktopDraggingEnabled || !sliderListRef.current || !carouselRef.current) return;\n    setIsDragging(true);\n    preDragOffset.current = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n    onDragStart(e);\n  }, [carouselRef, desktopDraggingEnabled, onDragStart]);\n  const onMouseMove = useCallback4(e => {\n    if (!isDragging || !carouselRef.current) return;\n    onDrag(e);\n    const offsetX = e.clientX - carouselRef.current.getBoundingClientRect().left;\n    const moveValue = carouselRef.current.offsetWidth - offsetX;\n    handlePointerMove(moveValue);\n  }, [carouselRef, isDragging, handlePointerMove, onDrag]);\n\n  const onMouseUp = e => {\n    e.preventDefault();\n    handleDragEnd(e);\n  };\n\n  const onMouseEnter = useCallback4(() => {\n    if (pauseOnHover) {\n      setPause(true);\n    }\n  }, [pauseOnHover]);\n  const onMouseLeave = useCallback4(() => {\n    if (pauseOnHover) {\n      setPause(false);\n    }\n  }, [pauseOnHover]);\n  const {\n    frameHeight,\n    handleVisibleSlideHeightChange,\n    initializedAdaptiveHeight\n  } = useFrameHeight(adaptiveHeight, slidesToShow, slideCount);\n\n  const renderSlides = typeOfSlide => {\n    const slides = filteredSlides.map((child, index) => {\n      return /* @__PURE__ */jsx7(slide_default, {\n        id: `${typeOfSlide}-${index}`,\n        count: slideCount,\n        index,\n        isCurrentSlide: currentSlide === index,\n        typeOfSlide,\n        wrapAround,\n        cellSpacing,\n        animation,\n        speed,\n        zoomScale,\n        onVisibleSlideHeightChange: handleVisibleSlideHeightChange,\n        slideWidth,\n        updateIOEntry: updateSlideIOEntry,\n        adaptiveHeight,\n        initializedAdaptiveHeight,\n        carouselRef,\n        children: child\n      }, `${typeOfSlide}-${index}`);\n    });\n    return slides;\n  };\n\n  return /* @__PURE__ */jsxs(\"div\", {\n    className: \"slider-container\",\n    style: {\n      position: \"relative\"\n    },\n    onMouseEnter,\n    onMouseLeave,\n    children: [/* @__PURE__ */jsx7(announce_slide_default, {\n      ariaLive: autoplay && !pause ? \"off\" : \"polite\",\n      message: renderAnnounceSlideMessage({\n        currentSlide,\n        count: slideCount\n      })\n    }), controls_default(props, slideCount, currentSlide, goToSlide, nextSlide, prevSlide, slidesToScroll), /* @__PURE__ */jsx7(\"div\", {\n      className: [\"slider-frame\", className || \"\"].join(\" \").trim(),\n      style: __spreadValues({\n        overflow: \"hidden\",\n        width: \"100%\",\n        position: \"relative\",\n        outline: \"none\",\n        touchAction: \"pan-y\",\n        height: frameHeight,\n        transition: adaptiveHeightAnimation ? \"height 300ms ease-in-out\" : void 0,\n        willChange: \"height\",\n        userSelect: \"none\"\n      }, style),\n      \"aria-label\": frameAriaLabel,\n      role: \"region\",\n      tabIndex: enableKeyboardControls ? 0 : -1,\n      onKeyDown: enableKeyboardControls ? onKeyDown : void 0,\n      ref: carouselRef,\n      onMouseUp,\n      onMouseDown,\n      onMouseMove,\n      onMouseLeave: onMouseUp,\n      onTouchStart,\n      onTouchEnd: handleDragEnd,\n      onTouchMove,\n      children: /* @__PURE__ */jsxs(SliderList, {\n        animationDistance,\n        cellAlign,\n        currentSlide,\n        disableEdgeSwiping: props.disableEdgeSwiping,\n        draggedOffset: preDragOffset.current - dragDistance,\n        disableAnimation,\n        easing: props.easing,\n        edgeEasing: props.edgeEasing,\n        isDragging,\n        ref: setSliderListRef,\n        scrollMode,\n        animation,\n        slideCount,\n        slidesToScroll,\n        slidesToShow,\n        speed,\n        slideWidth,\n        wrapAround,\n        setIsAnimating,\n        children: [wrapAround ? renderSlides(\"prev-cloned\") : null, renderSlides(), wrapAround ? renderSlides(\"next-cloned\") : null]\n      })\n    })]\n  });\n});\nCarousel.defaultProps = default_carousel_props_default;\nCarousel.displayName = \"Carousel\";\nexport { Alignment, Directions, NextButton, PagingDots, Positions, PreviousButton, ScrollMode, Carousel as default };","map":{"version":3,"mappings":"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","names":["React","useEffect","useState","useRef","useCallback","useSlideIntersectionObserver","elementRef","rootRef","callback","entry","setEntry","callbackRef","current","node","root","window","IntersectionObserver","observer","entries","forEach","threshold","observe","disconnect","getSlideWidth","count","wrapAround","getSlideStyles","isCurrentSlide","isVisibleSlide","cellSpacing","animation","speed","zoomScale","adaptiveHeight","initializedAdaptiveHeight","slideWidth","width","visibleSlideOpacity","animationSpeed","height","padding","transition","transform","opacity","generateIndex","index","typeOfSlide","Slide","children","onVisibleSlideHeightChange","updateIOEntry","id","carouselRef","customIndex","slideRef","intersectionRatio","isVisible","isIntersecting","isFullyVisible","_a","prevIsVisibleRef","slideHeight","getBoundingClientRect","prevIsVisible","currentSlideClass","__spreadProps","ref","inert","className","style","slide_default","styles","position","overflow","margin","clip","whiteSpace","border","AnnounceSlide","message","ariaLive","jsx","tabIndex","defaultRenderAnnounceSlideMessage","currentSlide","announce_slide_default","Alignment","Directions","Positions","ScrollMode","getNextMoveIndex","scrollMode","slideCount","slidesToScroll","slidesToShow","cellAlign","Math","min","getPrevMoveIndex","max","getDefaultSlideIndex","slideIndex","autoplayReverse","dotIndexes","getDotIndexes","length","getBoundedIndex","rawIndex","defaultButtonStyles","disabled","background","color","textTransform","cursor","prevButtonDisabled","PreviousButton","previousSlide","defaultControlsConfig","prevButtonClassName","prevButtonStyle","prevButtonText","prevButtonOnClick","onUserNavigation","previousDisabled","handleClick","event","defaultPrevented","preventDefault","__spreadValues","onClick","type","nextButtonDisabled","NextButton","nextSlide","nextButtonClassName","nextButtonStyle","nextButtonText","nextButtonOnClick","nextDisabled","scrollSlides","i","push","lastPossibleIndexWithoutWhitespace","firstPossibleIndexWithoutWhitespace","reverse","PagingDots","pagingDotsIndices","pagingDotsContainerClassName","pagingDotsClassName","pagingDotsStyle","pagingDotsOnClick","goToSlide","listStyles","top","display","listStyleType","getButtonStyles","active","fill","currentSlideBounded","map","isActive","focusable","viewBox","cx","cy","r","useTween","durationMs","easingFunction","navigationNum","shouldInterrupt","normalizedTimeRaw","setNormalizedTime","startTime","Date","now","rAF","isFirstRender","lastNavigationNum","normalizedTime","tick","requestAnimationFrame","currentTime","cancelAnimationFrame","isAnimating","value","getPercentOffsetForSlide","renderedSlideCount","singleSlidePercentOfWhole","slide0Offset","excessSlides","excessLeftSlides","currentSlideOffsetFrom0","SliderList","forwardRef","forwardedRef","animationDistance","disableAnimation","disableEdgeSwiping","draggedOffset","easing","edgeEasing","isDragging","setIsAnimating","listVisibleWidth","percentOffsetForSlideProps","clampedDraggedOffset","clampOffsets","slideBasedOffset","isEdgeEasing","positioning","transitionOffset","textAlign","userSelect","displayName","Fragment","commonStyles","zIndex","left","bottom","right","getControlContainerFlexStyles","pos","alignItems","justifyContent","getControlContainerStyles","controlsMap","funcName","key","renderControls","props","prevSlide","withoutControls","disableCheckProps","control","pointerEvents","toLowerCase","containerClassName","join","trim","vertical","controls_default","easeOut","t","__pow","defaultProps","adaptiveHeightAnimation","afterSlide","autoplay","autoplayInterval","beforeSlide","dragging","dragThreshold","enableKeyboardControls","frameAriaLabel","keyCodeConfig","firstSlide","lastSlide","pause","onDragStart","onDrag","onDragEnd","pauseOnHover","renderAnnounceSlideMessage","renderBottomCenterControls","renderCenterLeftControls","renderCenterRightControls","swiping","default_carousel_props_default","useMemo","useStateWithRef","initialState","setValue","valueRef","setValueAndRef","newValue","useFrameHeight","visibleHeights","setVisibleHeights","visibleHeightsRef","setInitializedAdaptiveHeight","handleVisibleSlideHeightChange","latestVisibleHeights","newVisibleHeights","filter","ceil","frameHeight","maxHeight","useForwardRef","targetRef","jsxs","Carousel","rawProps","propsCellAlign","desktopDraggingEnabled","propsDragThreshold","propsScrollMode","propsSlidesToScroll","propsSlidesToShow","mobileDraggingEnabled","filteredSlides","Children","toArray","Boolean","slideIOEntries","setSlideIOEntries","Map","visibleCount","Array","from","visible","constantVisibleCount","setConstantVisibleCount","setCurrentSlide","setPause","setIsDragging","dragDistance","setDragDistance","setAnimationDistance","updateSlideIOEntry","get","prev","newMap","set","prevDragged","prevXPosition","preDragOffset","sliderListRef","defaultCarouselRef","autoplayTimeout","autoplayLastTriggeredRef","isMounted","setSliderListRef","querySelectorAll","el","setAttribute","targetSlideUnbounded","targetSlideBounded","slideChanged","currentOffset","sliderWidth","offsetWidth","targetOffset","slideSetWidth","msToEndOfAnimation","setTimeout","nextSlideIndex","prevSlideIndex","prevMovedToSlideIndex","pauseStarted","adjustedTimeoutMs","clearTimeout","onKeyDown","keyCommand","Object","keys","command","includes","keyCode","stopPropagation","dotIndices","p","dragPositions","handleDragEnd","e","distanceFromInertia","startMove","endMove","timeOffset","time","goodInertiaFeelConstant","goodFrictionFeelConstant","initialVelocity","abs","velocity","adjustedDragDistance","oneScrollWidth","canMaintainVisualContinuity","timesToMove","floor","onTouchStart","handlePointerMove","xPosition","isFirstMove","delta","nextDragDistance","shift","onTouchMove","moveValue","touches","pageX","onMouseDown","onMouseMove","offsetX","clientX","onMouseUp","onMouseEnter","onMouseLeave","renderSlides","slides","child","outline","touchAction","willChange","role","onTouchEnd"],"sources":["/home/inp_ialencar/Documentos/Alencar/PTH/node_modules/nuka-carousel/src/carousel.tsx","/home/inp_ialencar/Documentos/Alencar/PTH/node_modules/nuka-carousel/src/slide.tsx","/home/inp_ialencar/Documentos/Alencar/PTH/node_modules/nuka-carousel/src/hooks/use-slide-intersection-observer.ts","/home/inp_ialencar/Documentos/Alencar/PTH/node_modules/nuka-carousel/src/announce-slide.tsx","/home/inp_ialencar/Documentos/Alencar/PTH/node_modules/nuka-carousel/src/slider-list.tsx","/home/inp_ialencar/Documentos/Alencar/PTH/node_modules/nuka-carousel/src/default-controls.tsx","/home/inp_ialencar/Documentos/Alencar/PTH/node_modules/nuka-carousel/src/types.ts","/home/inp_ialencar/Documentos/Alencar/PTH/node_modules/nuka-carousel/src/utils.ts","/home/inp_ialencar/Documentos/Alencar/PTH/node_modules/nuka-carousel/src/hooks/use-tween.ts","/home/inp_ialencar/Documentos/Alencar/PTH/node_modules/nuka-carousel/src/controls.tsx","/home/inp_ialencar/Documentos/Alencar/PTH/node_modules/nuka-carousel/src/control-styles.ts","/home/inp_ialencar/Documentos/Alencar/PTH/node_modules/nuka-carousel/src/default-carousel-props.tsx","/home/inp_ialencar/Documentos/Alencar/PTH/node_modules/nuka-carousel/src/hooks/use-frame-height.ts","/home/inp_ialencar/Documentos/Alencar/PTH/node_modules/nuka-carousel/src/hooks/use-state-with-ref.ts","/home/inp_ialencar/Documentos/Alencar/PTH/node_modules/nuka-carousel/src/hooks/use-forward-ref.ts"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport Slide from './slide';\nimport AnnounceSlide from './announce-slide';\nimport { getPercentOffsetForSlide, SliderList } from './slider-list';\nimport {\n  CarouselProps,\n  CellAlign,\n  InternalCarouselProps,\n  KeyCodeConfig,\n  KeyCodeFunction,\n  ScrollMode,\n} from './types';\nimport renderControls from './controls';\nimport defaultProps from './default-carousel-props';\nimport {\n  getNextMoveIndex,\n  getPrevMoveIndex,\n  getDefaultSlideIndex,\n  getBoundedIndex,\n} from './utils';\nimport { useFrameHeight } from './hooks/use-frame-height';\nimport { getDotIndexes } from './default-controls';\nimport { useForwardRef } from './hooks/use-forward-ref';\n\nexport const Carousel = React.forwardRef<HTMLDivElement, CarouselProps>(\n  (rawProps, ref): React.ReactElement => {\n    /**\n     * We need this cast because we want the component's properties to seem\n     * optional to external users, but always-present for the internal\n     * implementation.\n     *\n     * This cast is safe due to the `Carousel.defaultProps = defaultProps;`\n     * statement below. That guarantees all the properties are present, since\n     * `defaultProps` has type `InternalCarouselProps`.\n     */\n    const props = rawProps as InternalCarouselProps;\n\n    const {\n      adaptiveHeight,\n      adaptiveHeightAnimation,\n      afterSlide,\n      animation,\n      autoplay,\n      autoplayInterval,\n      autoplayReverse,\n      beforeSlide,\n      cellAlign: propsCellAlign,\n      cellSpacing,\n      children,\n      className,\n      disableAnimation,\n      dragging: desktopDraggingEnabled,\n      dragThreshold: propsDragThreshold,\n      enableKeyboardControls,\n      frameAriaLabel,\n      keyCodeConfig,\n      onDrag,\n      onDragEnd,\n      onDragStart,\n      onUserNavigation,\n      pauseOnHover,\n      renderAnnounceSlideMessage,\n      scrollMode: propsScrollMode,\n      slideIndex,\n      slidesToScroll: propsSlidesToScroll,\n      slidesToShow: propsSlidesToShow,\n      slideWidth,\n      speed,\n      style,\n      swiping: mobileDraggingEnabled,\n      wrapAround,\n      zoomScale,\n    } = props;\n\n    const filteredSlides = React.Children.toArray(children).filter(Boolean);\n    const slideCount = filteredSlides.length;\n\n    const cellAlign: CellAlign =\n      slideWidth || propsSlidesToScroll === 'auto' ? 'left' : propsCellAlign;\n\n    const scrollMode: ScrollMode =\n      propsSlidesToScroll === 'auto' ? ScrollMode.remainder : propsScrollMode;\n\n    const [slideIOEntries, setSlideIOEntries] = useState(\n      new Map<string, boolean>()\n    );\n\n    const visibleCount = Array.from(slideIOEntries).filter(\n      ([, visible]) => visible\n    ).length;\n\n    const [constantVisibleCount, setConstantVisibleCount] =\n      useState<number>(visibleCount);\n\n    const slidesToShow = slideWidth ? constantVisibleCount : propsSlidesToShow;\n\n    const slidesToScroll =\n      animation === 'fade'\n        ? slidesToShow\n        : propsSlidesToScroll === 'auto'\n        ? Math.max(constantVisibleCount, 1)\n        : propsSlidesToScroll;\n\n    const [currentSlide, setCurrentSlide] = useState<number>(() =>\n      getDefaultSlideIndex(\n        slideIndex,\n        slideCount,\n        slidesToShow,\n        slidesToScroll,\n        cellAlign,\n        autoplayReverse,\n        scrollMode\n      )\n    );\n    const [pause, setPause] = useState<boolean>(false);\n    const [isDragging, setIsDragging] = useState<boolean>(false);\n    const [dragDistance, setDragDistance] = useState<number>(0);\n    const [animationDistance, setAnimationDistance] = useState<number>(0);\n    const [isAnimating, setIsAnimating] = useState<boolean>(false);\n\n    const updateSlideIOEntry = useCallback(\n      (id: string, isFullyVisible: boolean) => {\n        if (!!slideIOEntries.get(id) === isFullyVisible) return;\n\n        setSlideIOEntries((prev) => {\n          const newMap = new Map(prev);\n          newMap.set(id, isFullyVisible);\n          return newMap;\n        });\n      },\n      [slideIOEntries]\n    );\n\n    const prevDragged = useRef(false);\n\n    useEffect(() => {\n      if (isDragging) prevDragged.current = true;\n\n      if (!(isDragging || isAnimating)) {\n        // Wait for the animation to complete after dragging\n        if (!prevDragged.current) setConstantVisibleCount(visibleCount);\n        prevDragged.current = false;\n      }\n    }, [isAnimating, isDragging, visibleCount]);\n\n    const prevXPosition = useRef<number | null>(null);\n    const preDragOffset = useRef<number>(0);\n    const sliderListRef = useRef<HTMLDivElement | null>(null);\n    const defaultCarouselRef = useRef<HTMLDivElement>(null);\n    const autoplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n    const autoplayLastTriggeredRef = useRef<number | null>(null);\n    const isMounted = useRef<boolean>(true);\n\n    const setSliderListRef = useCallback((node: HTMLDivElement) => {\n      if (node) {\n        // disable img draggable attribute by default, this will improve the dragging\n        // applying the querySelectorAll on just the descendants of the sliderList prevents\n        // impacting DOM elements outside our scope\n        node\n          .querySelectorAll('.slider-list img')\n          .forEach((el) => el.setAttribute('draggable', 'false'));\n      }\n      sliderListRef.current = node;\n    }, []);\n\n    useEffect(() => {\n      isMounted.current = true;\n      return () => {\n        isMounted.current = false;\n      };\n    }, []);\n\n    const forwardedRef = useForwardRef<HTMLDivElement>(ref);\n    const carouselRef = forwardedRef || defaultCarouselRef;\n\n    const goToSlide = useCallback(\n      (targetSlideUnbounded: number) => {\n        if (!sliderListRef.current || !carouselRef.current) return;\n\n        const targetSlideBounded = getBoundedIndex(\n          targetSlideUnbounded,\n          slideCount\n        );\n\n        const slideChanged = targetSlideUnbounded !== currentSlide;\n        slideChanged && beforeSlide(currentSlide, targetSlideBounded);\n\n        // Calculate the distance the slide transition animation needs to cover.\n        const currentOffset =\n          sliderListRef.current.getBoundingClientRect().left -\n          carouselRef.current.getBoundingClientRect().left;\n        const sliderWidth = sliderListRef.current.offsetWidth;\n        let targetOffset =\n          (getPercentOffsetForSlide(\n            targetSlideBounded,\n            slideCount,\n            slidesToShow,\n            cellAlign,\n            wrapAround\n          ) /\n            100) *\n          sliderWidth;\n        if (wrapAround) {\n          // We have to do a bit of a recovery effort to figure out the closest\n          // offset based on the direction we're going in the slides. The reason\n          // it's complicated is because, when wrapped, both the current offset\n          // and the calculated target offset are based on bounded slide indices -\n          // that is, when wrapping, we often skip back to the first or last slide\n          // seamlessly to make the carousel appear to infinitely repeat\n\n          // The DOM width of `slideCount` slides\n          const slideSetWidth = sliderWidth / 3;\n\n          if (targetSlideUnbounded < 0) {\n            targetOffset += slideSetWidth;\n          }\n          if (targetSlideUnbounded >= slideCount) {\n            targetOffset -= slideSetWidth;\n          }\n        }\n\n        setAnimationDistance(targetOffset - currentOffset);\n\n        if (slideChanged) {\n          setCurrentSlide(targetSlideBounded);\n\n          // if animation is disabled decrease the speed to 40\n          const msToEndOfAnimation = !disableAnimation ? speed || 500 : 40;\n          setTimeout(() => {\n            if (!isMounted.current) return;\n            afterSlide(targetSlideBounded);\n          }, msToEndOfAnimation);\n        }\n      },\n      [\n        afterSlide,\n        beforeSlide,\n        carouselRef,\n        cellAlign,\n        currentSlide,\n        disableAnimation,\n        speed,\n        slideCount,\n        slidesToShow,\n        wrapAround,\n      ]\n    );\n\n    const nextSlide = useCallback(() => {\n      const nextSlideIndex = getNextMoveIndex(\n        scrollMode,\n        wrapAround,\n        currentSlide,\n        slideCount,\n        slidesToScroll,\n        slidesToShow,\n        cellAlign\n      );\n\n      if (currentSlide !== nextSlideIndex) {\n        goToSlide(nextSlideIndex);\n      }\n    }, [\n      cellAlign,\n      currentSlide,\n      goToSlide,\n      slidesToScroll,\n      scrollMode,\n      slideCount,\n      slidesToShow,\n      wrapAround,\n    ]);\n\n    const prevSlide = useCallback(() => {\n      const prevSlideIndex = getPrevMoveIndex(\n        scrollMode,\n        wrapAround,\n        currentSlide,\n        slidesToScroll,\n        slidesToShow,\n        cellAlign\n      );\n\n      if (currentSlide !== prevSlideIndex) {\n        goToSlide(prevSlideIndex);\n      }\n    }, [\n      cellAlign,\n      currentSlide,\n      goToSlide,\n      slidesToScroll,\n      scrollMode,\n      slidesToShow,\n      wrapAround,\n    ]);\n\n    // When user changed the slideIndex property from outside.\n    const prevMovedToSlideIndex = useRef(slideIndex);\n    useEffect(() => {\n      if (\n        slideIndex !== undefined &&\n        slideIndex !== prevMovedToSlideIndex.current &&\n        !autoplayReverse\n      ) {\n        goToSlide(slideIndex);\n        prevMovedToSlideIndex.current = slideIndex;\n      }\n    }, [slideIndex, autoplayReverse, goToSlide]);\n\n    useEffect(() => {\n      let pauseStarted: number | null = null;\n\n      // Keep track of when autoplay was paused so we can resume it with the same\n      // remaining time to the next slide transition\n      if (pause) {\n        pauseStarted = Date.now();\n      }\n\n      return () => {\n        if (\n          pauseStarted !== null &&\n          autoplayLastTriggeredRef.current !== null\n        ) {\n          autoplayLastTriggeredRef.current += Date.now() - pauseStarted;\n        }\n      };\n    }, [pause]);\n\n    useEffect(() => {\n      if (autoplay && !pause) {\n        // Adjust the timeout duration to account for changes that triggered the\n        // re-creation of this timeout, such as the currentSlide being changed\n        // periodically to make wrapAround loop forever\n        const adjustedTimeoutMs =\n          autoplayLastTriggeredRef.current !== null\n            ? autoplayInterval - (Date.now() - autoplayLastTriggeredRef.current)\n            : autoplayInterval;\n\n        autoplayTimeout.current = setTimeout(() => {\n          autoplayLastTriggeredRef.current = Date.now();\n\n          if (autoplayReverse) {\n            prevSlide();\n          } else {\n            nextSlide();\n          }\n        }, adjustedTimeoutMs);\n      }\n\n      // Clear the timeout if user hover on carousel\n      if (autoplay && pause) {\n        clearTimeout(autoplayTimeout.current);\n      }\n\n      return () => {\n        clearTimeout(autoplayTimeout.current);\n      };\n    }, [\n      pause,\n      autoplay,\n      autoplayInterval,\n      autoplayReverse,\n      prevSlide,\n      nextSlide,\n    ]);\n\n    const onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n      let keyCommand: KeyCodeFunction = null;\n      (Object.keys(keyCodeConfig) as (keyof KeyCodeConfig)[]).forEach(\n        (command) => {\n          if (keyCodeConfig[command]?.includes(event.keyCode)) {\n            keyCommand = command;\n          }\n        }\n      );\n\n      if (keyCommand === null) return;\n\n      // At this point we know some action is going to be triggered, so we\n      // preventDefault to avoid the browser interpreting the key event and\n      // stopPropagation to avoid any higher-up handlers from interpreting it.\n      event.preventDefault();\n      event.stopPropagation();\n\n      switch (keyCommand) {\n        case 'nextSlide':\n          onUserNavigation(event);\n          nextSlide();\n          break;\n        case 'previousSlide':\n          onUserNavigation(event);\n          prevSlide();\n          break;\n        case 'firstSlide':\n        case 'lastSlide': {\n          onUserNavigation(event);\n\n          const dotIndices = getDotIndexes(\n            slideCount,\n            slidesToScroll,\n            scrollMode,\n            slidesToShow,\n            wrapAround,\n            cellAlign\n          );\n\n          if (keyCommand === 'firstSlide') {\n            goToSlide(dotIndices[0]);\n          } else {\n            goToSlide(dotIndices[dotIndices.length - 1]);\n          }\n          break;\n        }\n        case 'pause':\n          setPause((p) => !p);\n          break;\n      }\n    };\n\n    const dragPositions = useRef<{ pos: number; time: number }[]>([]);\n\n    const handleDragEnd = (\n      e: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>\n    ) => {\n      if (!isDragging || !carouselRef.current) return;\n\n      setIsDragging(false);\n\n      // Inertia calculation is used to allow quick flicks to scroll the carousel\n      // where they might not based on the start and end points of the gesture\n      // alone. In certain conditions, the inertia may also scroll the carousel\n      // several times.\n      let distanceFromInertia = 0;\n      if (dragPositions.current.length > 1) {\n        const startMove = dragPositions.current[0];\n        const endMove = dragPositions.current[dragPositions.current.length - 1];\n        const timeOffset = endMove.time - startMove.time;\n        const goodInertiaFeelConstant = 9;\n        const goodFrictionFeelConstant = 0.92;\n        const initialVelocity =\n          goodInertiaFeelConstant *\n          Math.abs((endMove.pos - startMove.pos) / timeOffset);\n        let velocity = initialVelocity;\n\n        while (Math.abs(velocity) > 1) {\n          distanceFromInertia += velocity;\n          velocity *= goodFrictionFeelConstant;\n        }\n      }\n      dragPositions.current = [];\n\n      const adjustedDragDistance =\n        Math.abs(dragDistance) + Math.abs(distanceFromInertia);\n\n      onDragEnd(e);\n\n      prevXPosition.current = null;\n      setDragDistance(0);\n\n      const oneScrollWidth =\n        carouselRef.current.offsetWidth *\n        Math.min(1, slidesToScroll / slidesToShow);\n      const dragThreshold = oneScrollWidth * propsDragThreshold;\n\n      if (adjustedDragDistance < dragThreshold) {\n        goToSlide(currentSlide);\n        return;\n      }\n\n      // If skipping over multiple slides at a time is still roughly trackable by\n      // your eyes, we allow for skipping multiple slides with a single gesture.\n      // This formula is just based off an observation that it is confusing to\n      // skip from slides 1 to 3 when only one slide is shown at a time, but\n      // skipping from 1 to 4 or so with two slides shown at a time is pulled-back\n      // enough that you can still roughly keep track of your place in the\n      // carousel.\n      const canMaintainVisualContinuity = slidesToShow >= 2 * slidesToScroll;\n      const timesToMove = canMaintainVisualContinuity\n        ? 1 +\n          Math.floor((adjustedDragDistance - dragThreshold) / oneScrollWidth)\n        : 1;\n\n      let nextSlideIndex = currentSlide;\n      for (let index = 0; index < timesToMove; index += 1) {\n        if (dragDistance > 0) {\n          nextSlideIndex = getNextMoveIndex(\n            scrollMode,\n            wrapAround,\n            nextSlideIndex,\n            slideCount,\n            slidesToScroll,\n            slidesToShow,\n            cellAlign\n          );\n        } else {\n          nextSlideIndex = getPrevMoveIndex(\n            scrollMode,\n            wrapAround,\n            nextSlideIndex,\n            slidesToScroll,\n            slidesToShow,\n            cellAlign\n          );\n        }\n      }\n\n      if (nextSlideIndex !== currentSlide) {\n        onUserNavigation(e);\n      }\n\n      goToSlide(nextSlideIndex);\n    };\n\n    const onTouchStart = useCallback(\n      (e: React.TouchEvent<HTMLDivElement>) => {\n        if (\n          !mobileDraggingEnabled ||\n          !sliderListRef.current ||\n          !carouselRef.current\n        ) {\n          return;\n        }\n        setIsDragging(true);\n        preDragOffset.current =\n          sliderListRef.current.getBoundingClientRect().left -\n          carouselRef.current.getBoundingClientRect().left;\n\n        onDragStart(e);\n      },\n      [carouselRef, onDragStart, mobileDraggingEnabled]\n    );\n\n    const handlePointerMove = useCallback(\n      (xPosition: number) => {\n        if (!isDragging) return;\n\n        const isFirstMove = prevXPosition.current === null;\n        const delta =\n          prevXPosition.current !== null\n            ? xPosition - prevXPosition.current\n            : 0;\n        const nextDragDistance = dragDistance + delta;\n\n        const now = Date.now();\n        // Maintain a buffer of drag positions from the last 100ms\n        while (dragPositions.current.length > 0) {\n          if (now - dragPositions.current[0].time <= 100) {\n            break;\n          }\n          dragPositions.current.shift();\n        }\n        dragPositions.current.push({ pos: nextDragDistance, time: now });\n\n        if (!isFirstMove) {\n          // nextDragDistance will always be `0` on the first move event, so we\n          // skip it because the value is already set to 0 at this point\n          setDragDistance(nextDragDistance);\n        }\n\n        prevXPosition.current = xPosition;\n      },\n      [isDragging, dragDistance]\n    );\n\n    const onTouchMove = useCallback(\n      (e: React.TouchEvent<HTMLDivElement>) => {\n        if (!isDragging || !carouselRef.current) return;\n\n        onDragStart(e);\n\n        const moveValue = carouselRef.current.offsetWidth - e.touches[0].pageX;\n\n        handlePointerMove(moveValue);\n      },\n      [isDragging, carouselRef, handlePointerMove, onDragStart]\n    );\n\n    const onMouseDown = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (\n          !desktopDraggingEnabled ||\n          !sliderListRef.current ||\n          !carouselRef.current\n        )\n          return;\n\n        setIsDragging(true);\n\n        preDragOffset.current =\n          sliderListRef.current.getBoundingClientRect().left -\n          carouselRef.current.getBoundingClientRect().left;\n\n        onDragStart(e);\n      },\n      [carouselRef, desktopDraggingEnabled, onDragStart]\n    );\n\n    const onMouseMove = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isDragging || !carouselRef.current) return;\n\n        onDrag(e);\n\n        const offsetX =\n          e.clientX - carouselRef.current.getBoundingClientRect().left;\n        const moveValue = carouselRef.current.offsetWidth - offsetX;\n\n        handlePointerMove(moveValue);\n      },\n      [carouselRef, isDragging, handlePointerMove, onDrag]\n    );\n\n    const onMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n      e.preventDefault();\n      handleDragEnd(e);\n    };\n\n    const onMouseEnter = useCallback(() => {\n      if (pauseOnHover) {\n        setPause(true);\n      }\n    }, [pauseOnHover]);\n\n    const onMouseLeave = useCallback(() => {\n      if (pauseOnHover) {\n        setPause(false);\n      }\n    }, [pauseOnHover]);\n\n    const {\n      frameHeight,\n      handleVisibleSlideHeightChange,\n      initializedAdaptiveHeight,\n    } = useFrameHeight(adaptiveHeight, slidesToShow, slideCount);\n\n    const renderSlides = (typeOfSlide?: 'prev-cloned' | 'next-cloned') => {\n      const slides = filteredSlides.map((child, index) => {\n        return (\n          <Slide\n            key={`${typeOfSlide}-${index}`}\n            id={`${typeOfSlide}-${index}`}\n            count={slideCount}\n            index={index}\n            isCurrentSlide={currentSlide === index}\n            typeOfSlide={typeOfSlide}\n            wrapAround={wrapAround}\n            cellSpacing={cellSpacing}\n            animation={animation}\n            speed={speed}\n            zoomScale={zoomScale}\n            onVisibleSlideHeightChange={handleVisibleSlideHeightChange}\n            slideWidth={slideWidth}\n            updateIOEntry={updateSlideIOEntry}\n            adaptiveHeight={adaptiveHeight}\n            initializedAdaptiveHeight={initializedAdaptiveHeight}\n            carouselRef={carouselRef}\n          >\n            {child}\n          </Slide>\n        );\n      });\n\n      return slides;\n    };\n\n    return (\n      <div\n        className={'slider-container'}\n        style={{\n          position: 'relative',\n        }}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n      >\n        <AnnounceSlide\n          ariaLive={autoplay && !pause ? 'off' : 'polite'}\n          message={renderAnnounceSlideMessage({\n            currentSlide,\n            count: slideCount,\n          })}\n        />\n\n        {renderControls(\n          props,\n          slideCount,\n          currentSlide,\n          goToSlide,\n          nextSlide,\n          prevSlide,\n          slidesToScroll\n        )}\n\n        <div\n          className={['slider-frame', className || ''].join(' ').trim()}\n          style={{\n            overflow: 'hidden',\n            width: '100%',\n            position: 'relative',\n            outline: 'none',\n            touchAction: 'pan-y',\n            height: frameHeight,\n            transition: adaptiveHeightAnimation\n              ? 'height 300ms ease-in-out'\n              : undefined,\n            willChange: 'height',\n            userSelect: 'none',\n            ...style,\n          }}\n          aria-label={frameAriaLabel}\n          role=\"region\"\n          tabIndex={enableKeyboardControls ? 0 : -1}\n          onKeyDown={enableKeyboardControls ? onKeyDown : undefined}\n          ref={carouselRef}\n          onMouseUp={onMouseUp}\n          onMouseDown={onMouseDown}\n          onMouseMove={onMouseMove}\n          onMouseLeave={onMouseUp}\n          onTouchStart={onTouchStart}\n          onTouchEnd={handleDragEnd}\n          onTouchMove={onTouchMove}\n        >\n          <SliderList\n            animationDistance={animationDistance}\n            cellAlign={cellAlign}\n            currentSlide={currentSlide}\n            disableEdgeSwiping={props.disableEdgeSwiping}\n            draggedOffset={preDragOffset.current - dragDistance}\n            disableAnimation={disableAnimation}\n            easing={props.easing}\n            edgeEasing={props.edgeEasing}\n            isDragging={isDragging}\n            ref={setSliderListRef}\n            scrollMode={scrollMode}\n            animation={animation}\n            slideCount={slideCount}\n            slidesToScroll={slidesToScroll}\n            slidesToShow={slidesToShow}\n            speed={speed}\n            slideWidth={slideWidth}\n            wrapAround={wrapAround}\n            setIsAnimating={setIsAnimating}\n          >\n            {wrapAround ? renderSlides('prev-cloned') : null}\n            {renderSlides()}\n            {wrapAround ? renderSlides('next-cloned') : null}\n          </SliderList>\n        </div>\n      </div>\n    );\n  }\n);\n\nCarousel.defaultProps = defaultProps;\nCarousel.displayName = 'Carousel';\n\nexport default Carousel;\n","import React, {\n  CSSProperties,\n  ReactNode,\n  useRef,\n  useEffect,\n  RefObject,\n} from 'react';\nimport { useSlideIntersectionObserver } from './hooks/use-slide-intersection-observer';\n\nconst getSlideWidth = (count: number, wrapAround?: boolean): string =>\n  `${wrapAround ? 100 / (3 * count) : 100 / count}%`;\n\nconst getSlideStyles = (\n  count: number,\n  isCurrentSlide: boolean,\n  isVisibleSlide: boolean,\n  wrapAround: boolean,\n  cellSpacing: number,\n  animation: 'zoom' | 'fade' | undefined,\n  speed: number,\n  zoomScale: number | undefined,\n  adaptiveHeight: boolean,\n  initializedAdaptiveHeight: boolean,\n  slideWidth: CSSProperties['width']\n): CSSProperties => {\n  const width = slideWidth ?? getSlideWidth(count, wrapAround);\n  // const width = getSlideWidth(count, wrapAround);\n  const visibleSlideOpacity = isVisibleSlide ? 1 : 0;\n  const animationSpeed = animation === 'fade' ? 200 : 500;\n\n  let height = 'auto';\n  if (adaptiveHeight) {\n    if (initializedAdaptiveHeight) {\n      // Once adaptiveHeight is initialized, the frame will size to the height\n      // of all the visible slides\n      height = '100%';\n    } else if (isVisibleSlide) {\n      // If the slide is visible but we're still measuring heights, have\n      // visible slides just take up their natural height\n      height = 'auto';\n    } else {\n      // If the slide is not visible and we're still measuring heights, the\n      // slide should have height 0 so it doesn't contribute to the measured\n      // height of the frame\n      height = '0';\n    }\n  }\n\n  return {\n    width,\n    height,\n    padding: `0 ${cellSpacing ? cellSpacing / 2 : 0}px`,\n    transition: animation ? `${speed || animationSpeed}ms ease 0s` : undefined,\n    transform:\n      animation === 'zoom'\n        ? `scale(${isCurrentSlide && isVisibleSlide ? 1 : zoomScale || 0.85})`\n        : undefined,\n    opacity: animation === 'fade' ? visibleSlideOpacity : 1,\n  };\n};\n\nconst generateIndex = (\n  index: number,\n  count: number,\n  typeOfSlide?: 'prev-cloned' | 'next-cloned'\n): number => {\n  if (typeOfSlide === 'prev-cloned') {\n    return index - count;\n  }\n\n  if (typeOfSlide === 'next-cloned') {\n    return index + count;\n  }\n\n  return index;\n};\n\nconst Slide = ({\n  count,\n  children,\n  index,\n  isCurrentSlide,\n  typeOfSlide,\n  wrapAround,\n  cellSpacing,\n  slideWidth,\n  animation,\n  speed,\n  zoomScale,\n  onVisibleSlideHeightChange,\n  adaptiveHeight,\n  initializedAdaptiveHeight,\n  updateIOEntry,\n  id,\n  carouselRef,\n}: {\n  count: number;\n  id: string;\n  children: ReactNode | ReactNode[];\n  index: number;\n  isCurrentSlide: boolean;\n  typeOfSlide: 'prev-cloned' | 'next-cloned' | undefined;\n  wrapAround: boolean;\n  cellSpacing: number;\n  animation: 'zoom' | 'fade' | undefined;\n  speed: number;\n  zoomScale: number | undefined;\n  slideWidth?: CSSProperties['width'];\n  updateIOEntry: (id: string, isFullyVisible: boolean) => void;\n  carouselRef: RefObject<Element>;\n  /**\n   * Called with `height` when slide becomes visible and `null` when it becomes\n   * hidden.\n   */\n  onVisibleSlideHeightChange: (index: number, height: number | null) => unknown;\n  adaptiveHeight: boolean;\n  initializedAdaptiveHeight: boolean;\n}): JSX.Element => {\n  const customIndex = wrapAround\n    ? generateIndex(index, count, typeOfSlide)\n    : index;\n\n  const slideRef = useRef<HTMLDivElement>(null);\n\n  const entry = useSlideIntersectionObserver(slideRef, carouselRef, (entry) => {\n    updateIOEntry(id, entry?.intersectionRatio >= 0.95);\n  });\n\n  const isVisible = !!entry?.isIntersecting;\n  const isFullyVisible = (entry?.intersectionRatio ?? 1) >= 0.95;\n\n  const prevIsVisibleRef = useRef(false);\n  useEffect(() => {\n    const node = slideRef.current;\n    if (node) {\n      const slideHeight = node.getBoundingClientRect()?.height;\n\n      const prevIsVisible = prevIsVisibleRef.current;\n      if (isVisible && !prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, slideHeight);\n      } else if (!isVisible && prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, null);\n      }\n\n      prevIsVisibleRef.current = isVisible;\n    }\n  }, [customIndex, isVisible, onVisibleSlideHeightChange]);\n\n  const currentSlideClass =\n    isCurrentSlide && isFullyVisible ? ' slide-current' : '';\n\n  return (\n    <div\n      ref={slideRef}\n      {...{ inert: isFullyVisible ? undefined : 'true' }}\n      className={`slide${currentSlideClass}${\n        typeOfSlide ? ` ${typeOfSlide}` : ''\n      }${isFullyVisible ? ' slide-visible' : ''}`}\n      style={getSlideStyles(\n        count,\n        isCurrentSlide,\n        isFullyVisible,\n        wrapAround,\n        cellSpacing,\n        animation,\n        speed,\n        zoomScale,\n        adaptiveHeight,\n        initializedAdaptiveHeight,\n        slideWidth\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Slide;\n","import { RefObject, useEffect, useRef, useState } from 'react';\n\nexport const useSlideIntersectionObserver = (\n  elementRef: RefObject<Element>,\n  rootRef: RefObject<Element>,\n  callback: (entry: IntersectionObserverEntry) => void\n) => {\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\n  const callbackRef = useRef(callback);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const node = elementRef?.current;\n    const root = rootRef?.current;\n\n    if (!window.IntersectionObserver || !node || !root) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          setEntry(entry);\n          callbackRef.current(entry);\n        });\n      },\n      {\n        threshold: [0.05, 0.95],\n        root,\n      }\n    );\n\n    observer.observe(node);\n\n    return () => observer.disconnect();\n  }, [elementRef, rootRef]);\n\n  return entry;\n};\n","import React, { AriaAttributes, CSSProperties } from 'react';\n\nconst styles: CSSProperties = {\n  position: 'absolute',\n  width: '1px',\n  height: '1px',\n  overflow: 'hidden',\n  padding: 0,\n  margin: '-1px',\n  clip: 'rect(0, 0, 0, 0)',\n  whiteSpace: 'nowrap',\n  border: 0,\n};\n\nconst AnnounceSlide = ({\n  message,\n  ariaLive = 'polite',\n}: {\n  message: string;\n  ariaLive: AriaAttributes['aria-live'];\n}): React.ReactElement => (\n  <div aria-live={ariaLive} aria-atomic=\"true\" style={styles} tabIndex={-1}>\n    {message}\n  </div>\n);\n\nexport const defaultRenderAnnounceSlideMessage = ({\n  currentSlide,\n  count,\n}: {\n  currentSlide: number;\n  count: number;\n}): string => `Slide ${currentSlide + 1} of ${count}`;\n\nexport default AnnounceSlide;\n","import React, { ReactNode, useEffect } from 'react';\nimport { getDotIndexes } from './default-controls';\nimport { useTween } from './hooks/use-tween';\nimport { CellAlign, InternalCarouselProps } from './types';\n\nexport const getPercentOffsetForSlide = (\n  currentSlide: number,\n  slideCount: number,\n  slidesToShow: number,\n  cellAlign: CellAlign,\n  wrapAround: boolean\n): number => {\n  // When wrapAround is enabled, we show the slides 3 times\n  const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n\n  const singleSlidePercentOfWhole = 100 / renderedSlideCount;\n\n  // When wrap is on, -33.33% puts us right on the center, true set of slides\n  // (the left and right sets are clones meant to avoid visual gaps)\n  let slide0Offset = wrapAround ? -100 / 3 : 0;\n\n  if (cellAlign === 'right' && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    slide0Offset += singleSlidePercentOfWhole * excessSlides;\n  }\n\n  if (cellAlign === 'center' && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    // Half of excess is on left and half is on right when centered\n    const excessLeftSlides = excessSlides / 2;\n    slide0Offset += singleSlidePercentOfWhole * excessLeftSlides;\n  }\n\n  const currentSlideOffsetFrom0 = (100 / renderedSlideCount) * currentSlide;\n\n  return slide0Offset - currentSlideOffsetFrom0;\n};\n\ninterface SliderListProps\n  extends Pick<\n    InternalCarouselProps,\n    | 'cellAlign'\n    | 'disableAnimation'\n    | 'disableEdgeSwiping'\n    | 'easing'\n    | 'edgeEasing'\n    | 'scrollMode'\n    | 'animation'\n    | 'slidesToShow'\n    | 'slideWidth'\n    | 'speed'\n    | 'wrapAround'\n  > {\n  slidesToScroll: number;\n  animationDistance: number;\n  children: ReactNode;\n  currentSlide: number;\n  draggedOffset: number;\n  isDragging: boolean;\n  slideCount: number;\n  setIsAnimating: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const SliderList = React.forwardRef<HTMLDivElement, SliderListProps>(\n  (\n    {\n      animation,\n      animationDistance,\n      cellAlign,\n      children,\n      currentSlide,\n      disableAnimation,\n      disableEdgeSwiping,\n      draggedOffset,\n      easing,\n      edgeEasing,\n      isDragging,\n      scrollMode,\n      slideCount,\n      slidesToScroll,\n      slidesToShow,\n      speed,\n      wrapAround,\n      slideWidth,\n      setIsAnimating,\n    },\n    forwardedRef\n  ) => {\n    // When wrapAround is enabled, we show the slides 3 times\n    const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n\n    const listVisibleWidth = slideWidth\n      ? `calc(${slideWidth} * ${renderedSlideCount})`\n      : `${(renderedSlideCount * 100) / slidesToShow}%`;\n\n    const percentOffsetForSlideProps = [\n      slideCount,\n      slidesToShow,\n      cellAlign,\n      wrapAround,\n    ] as const;\n\n    // We recycle dot index generation to determine the leftmost and rightmost\n    // indices used, to be used in calculating the x-translation values we need\n    // to limit to or when edgeEasing should be used.\n    const dotIndexes = getDotIndexes(\n      slideCount,\n      slidesToScroll,\n      scrollMode,\n      slidesToShow,\n      wrapAround,\n      cellAlign\n    );\n\n    let clampedDraggedOffset = `${draggedOffset}px`;\n    if (isDragging && disableEdgeSwiping && !wrapAround) {\n      const clampOffsets = [\n        dotIndexes[0],\n        dotIndexes[dotIndexes.length - 1],\n      ].map((index) =>\n        getPercentOffsetForSlide(index, ...percentOffsetForSlideProps)\n      );\n      // Offsets are seemingly backwards because the rightmost slide creates\n      // the most negative translate value\n      clampedDraggedOffset = `clamp(${clampOffsets[1]}%, ${draggedOffset}px, ${clampOffsets[0]}%)`;\n    }\n\n    const slideBasedOffset = getPercentOffsetForSlide(\n      currentSlide,\n      ...percentOffsetForSlideProps\n    );\n\n    const isEdgeEasing =\n      !disableEdgeSwiping &&\n      !wrapAround &&\n      ((currentSlide === dotIndexes[0] && animationDistance < 0) ||\n        (currentSlide === dotIndexes[dotIndexes.length - 1] &&\n          animationDistance > 0));\n    const { value: transition, isAnimating } = useTween(\n      speed,\n      !isEdgeEasing ? easing : edgeEasing,\n      // animationDistance is assumed to be unique enough that it can be used to\n      // detect when a new animation should start. This is used in addition to\n      // currentSlide because some animations, such as those with edgeEasing, do\n      // not occur due to a change in value of currentSlide\n      currentSlide + animationDistance,\n      isDragging || disableAnimation || animation === 'fade'\n    );\n\n    // Return undefined if the transform would be 0 pixels since transforms can\n    // cause flickering in chrome.\n    let positioning: string | undefined;\n    if (isDragging || slideBasedOffset !== 0 || isAnimating) {\n      if (isDragging) {\n        positioning = `translateX(${clampedDraggedOffset})`;\n      } else {\n        const transitionOffset = isAnimating\n          ? (1 - transition) * animationDistance\n          : 0;\n        positioning = `translateX(calc(${slideBasedOffset}% - ${transitionOffset}px))`;\n      }\n    }\n\n    useEffect(() => {\n      setIsAnimating(isAnimating);\n    }, [isAnimating, setIsAnimating]);\n\n    return (\n      <div\n        ref={forwardedRef}\n        className=\"slider-list\"\n        style={{\n          width: listVisibleWidth,\n          textAlign: 'left',\n          userSelect: 'auto',\n          transform: positioning,\n          display: 'flex',\n        }}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nSliderList.displayName = 'SliderList';\n","import React, { CSSProperties, useCallback } from 'react';\nimport { CellAlign, ControlProps, ScrollMode } from './types';\nimport { getBoundedIndex } from './utils';\n\nconst defaultButtonStyles = (disabled: boolean): CSSProperties => ({\n  border: 0,\n  background: 'rgba(0,0,0,0.4)',\n  color: 'white',\n  padding: 10,\n  textTransform: 'uppercase',\n  opacity: disabled ? 0.3 : 1,\n  cursor: disabled ? 'not-allowed' : 'pointer',\n});\n\nexport const prevButtonDisabled = ({\n  cellAlign,\n  currentSlide,\n  slidesToShow,\n  wrapAround,\n}: Pick<\n  ControlProps,\n  'cellAlign' | 'currentSlide' | 'slidesToShow' | 'wrapAround'\n>) => {\n  // inifite carousel\n  if (wrapAround) {\n    return false;\n  }\n\n  // disable if displaying the leftmost slide\n  if (currentSlide === 0) {\n    return true;\n  }\n\n  // remainder scroll mode\n  if (cellAlign === 'right' && currentSlide <= slidesToShow - 1) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const PreviousButton = ({\n  previousSlide,\n  defaultControlsConfig: {\n    prevButtonClassName,\n    prevButtonStyle = {},\n    prevButtonText,\n    prevButtonOnClick,\n  },\n  onUserNavigation,\n  previousDisabled: disabled,\n}: ControlProps) => {\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    prevButtonOnClick?.(event);\n    if (event.defaultPrevented) return;\n\n    onUserNavigation(event);\n\n    event.preventDefault();\n    previousSlide();\n  };\n\n  return (\n    <button\n      className={prevButtonClassName}\n      style={{\n        ...defaultButtonStyles(disabled),\n        ...prevButtonStyle,\n      }}\n      disabled={disabled}\n      onClick={handleClick}\n      aria-label=\"previous\"\n      type=\"button\"\n    >\n      {prevButtonText || 'Prev'}\n    </button>\n  );\n};\n\nexport const nextButtonDisabled = ({\n  cellAlign,\n  currentSlide,\n  slideCount,\n  slidesToShow,\n  wrapAround,\n}: Pick<\n  ControlProps,\n  'cellAlign' | 'currentSlide' | 'slideCount' | 'slidesToShow' | 'wrapAround'\n>) => {\n  // inifite carousel\n  if (wrapAround) {\n    return false;\n  }\n\n  // If we are at the last possible slide without wrap, disable\n  if (currentSlide >= slideCount - 1) {\n    return true;\n  }\n\n  // remainder scroll mode\n  if (cellAlign === 'left' && currentSlide >= slideCount - slidesToShow) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const NextButton = ({\n  nextSlide,\n  defaultControlsConfig: {\n    nextButtonClassName,\n    nextButtonStyle = {},\n    nextButtonText,\n    nextButtonOnClick,\n  },\n  nextDisabled: disabled,\n  onUserNavigation,\n}: ControlProps) => {\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    nextButtonOnClick?.(event);\n    if (event.defaultPrevented) return;\n\n    onUserNavigation(event);\n\n    event.preventDefault();\n    nextSlide();\n  };\n\n  return (\n    <button\n      className={nextButtonClassName}\n      style={{\n        ...defaultButtonStyles(disabled),\n        ...nextButtonStyle,\n      }}\n      disabled={disabled}\n      onClick={handleClick}\n      aria-label=\"next\"\n      type=\"button\"\n    >\n      {nextButtonText || 'Next'}\n    </button>\n  );\n};\n\n/**\n * Calculate the indices that each dot will jump to when clicked\n */\nexport const getDotIndexes = (\n  slideCount: number,\n  slidesToScroll: number,\n  scrollMode: ScrollMode,\n  slidesToShow: number,\n  wrapAround: boolean,\n  cellAlign: CellAlign\n) => {\n  const dotIndexes: number[] = [];\n  const scrollSlides = slidesToScroll <= 0 ? 1 : slidesToScroll;\n\n  if (wrapAround) {\n    for (let i = 0; i < slideCount; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === 'center') {\n    for (let i = 0; i < slideCount - 1; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    if (slideCount > 0) {\n      dotIndexes.push(slideCount - 1);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === 'left') {\n    if (slidesToShow >= slideCount) {\n      return [0];\n    }\n\n    const lastPossibleIndexWithoutWhitespace = slideCount - slidesToShow;\n\n    for (let i = 0; i < lastPossibleIndexWithoutWhitespace; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    if (scrollMode === ScrollMode.remainder) {\n      dotIndexes.push(lastPossibleIndexWithoutWhitespace);\n    } else {\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] + scrollSlides);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === 'right') {\n    if (slidesToShow >= slideCount) {\n      return [slideCount - 1];\n    }\n\n    const firstPossibleIndexWithoutWhitespace = slidesToShow - 1;\n\n    if (scrollMode === ScrollMode.remainder) {\n      for (\n        let i = firstPossibleIndexWithoutWhitespace;\n        i < slideCount - 1;\n        i += scrollSlides\n      ) {\n        dotIndexes.push(i);\n      }\n      dotIndexes.push(slideCount - 1);\n    } else {\n      for (\n        let i = slideCount - 1;\n        i > firstPossibleIndexWithoutWhitespace;\n        i -= scrollSlides\n      ) {\n        dotIndexes.push(i);\n      }\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] - scrollSlides);\n\n      dotIndexes.reverse();\n    }\n\n    return dotIndexes;\n  }\n\n  // We should never reach this, because the if statements above cover all\n  // possible values of cellAlign\n  return dotIndexes;\n};\n\nexport const PagingDots = ({\n  pagingDotsIndices,\n  defaultControlsConfig: {\n    pagingDotsContainerClassName,\n    pagingDotsClassName,\n    pagingDotsStyle = {},\n    pagingDotsOnClick,\n  },\n  currentSlide,\n  onUserNavigation,\n  slideCount,\n  goToSlide,\n}: ControlProps) => {\n  const listStyles: CSSProperties = {\n    position: 'relative',\n    top: -10,\n    display: 'flex',\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none',\n  };\n\n  const getButtonStyles = useCallback(\n    (active: boolean) => ({\n      cursor: 'pointer',\n      opacity: active ? 1 : 0.5,\n      background: 'transparent',\n      border: 'none',\n      fill: 'black',\n    }),\n    []\n  );\n  const currentSlideBounded = getBoundedIndex(currentSlide, slideCount);\n\n  return (\n    <ul className={pagingDotsContainerClassName} style={listStyles}>\n      {pagingDotsIndices.map((slideIndex, i) => {\n        const isActive =\n          currentSlideBounded === slideIndex ||\n          // sets navigation dots active if the current slide falls in the current index range\n          (currentSlideBounded < slideIndex &&\n            (i === 0 || currentSlideBounded > pagingDotsIndices[i - 1]));\n\n        return (\n          <li\n            key={slideIndex}\n            className={isActive ? 'paging-item active' : 'paging-item'}\n          >\n            <button\n              className={pagingDotsClassName}\n              type=\"button\"\n              style={{\n                ...getButtonStyles(isActive),\n                ...pagingDotsStyle,\n              }}\n              onClick={(event) => {\n                pagingDotsOnClick?.(event);\n                if (event.defaultPrevented) return;\n\n                onUserNavigation(event);\n\n                goToSlide(slideIndex);\n              }}\n              aria-label={`slide ${slideIndex + 1} bullet`}\n              aria-selected={isActive}\n            >\n              <svg\n                className=\"paging-dot\"\n                width=\"6\"\n                height=\"6\"\n                aria-hidden=\"true\"\n                focusable=\"false\"\n                viewBox=\"0 0 6 6\"\n              >\n                <circle cx=\"3\" cy=\"3\" r=\"3\" />\n              </svg>\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import { ReactNode, CSSProperties } from 'react';\n\nexport type CellAlign = 'center' | 'right' | 'left';\n\n/** @deprecated use string literals for the values instead */\nexport enum Alignment {\n  Center = 'center',\n  Right = 'right',\n  Left = 'left',\n}\n\nexport enum Directions {\n  Next = 'next',\n  Prev = 'prev',\n  Up = 'up',\n  Down = 'down',\n}\n\nexport enum Positions {\n  TopLeft = 'TopLeft',\n  TopCenter = 'TopCenter',\n  TopRight = 'TopRight',\n  CenterLeft = 'CenterLeft',\n  CenterCenter = 'CenterCenter',\n  CenterRight = 'CenterRight',\n  BottomLeft = 'BottomLeft',\n  BottomCenter = 'BottomCenter',\n  BottomRight = 'BottomRight',\n}\n\ntype SlideChildren = {\n  offsetHeight: number;\n};\n\nexport type SlideHeight = {\n  height: number;\n  slideIndex: number;\n};\n\nexport interface Slide {\n  children?: [SlideChildren];\n  offsetHeight: number;\n}\n\nexport enum ScrollMode {\n  page = 'page',\n  remainder = 'remainder',\n}\n\ninterface DefaultControlsConfig {\n  containerClassName?: string;\n  nextButtonClassName?: string;\n  nextButtonOnClick?: React.MouseEventHandler;\n  nextButtonStyle?: CSSProperties;\n  nextButtonText?: ReactNode;\n  pagingDotsClassName?: string;\n  pagingDotsContainerClassName?: string;\n  pagingDotsOnClick?: React.MouseEventHandler;\n  pagingDotsStyle?: CSSProperties;\n  prevButtonClassName?: string;\n  prevButtonOnClick?: React.MouseEventHandler;\n  prevButtonStyle?: CSSProperties;\n  prevButtonText?: ReactNode;\n}\n\nexport interface KeyCodeConfig {\n  firstSlide?: number[];\n  lastSlide?: number[];\n  nextSlide?: number[];\n  pause?: number[];\n  previousSlide?: number[];\n}\n\nexport type KeyCodeFunction =\n  | 'nextSlide'\n  | 'previousSlide'\n  | 'firstSlide'\n  | 'lastSlide'\n  | 'pause'\n  | null;\n\nexport interface KeyCodeMap {\n  [key: number]: keyof KeyCodeConfig;\n}\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/** @deprecated This is not actually used for anything */\nexport interface CarouselState {}\n/* eslint-enable @typescript-eslint/no-empty-interface */\n\ntype RenderAnnounceSlideMessage = (props: {\n  currentSlide: number;\n  count: number;\n}) => string;\n\nexport interface ControlProps\n  extends Pick<\n    InternalCarouselProps,\n    | 'cellAlign'\n    | 'cellSpacing'\n    | 'defaultControlsConfig'\n    | 'onUserNavigation'\n    | 'scrollMode'\n    | 'slidesToScroll'\n    | 'slidesToShow'\n    | 'vertical'\n    | 'wrapAround'\n  > {\n  /**\n   * Current slide index\n   */\n  currentSlide: number;\n\n  /**\n   * The indices for the paging dots\n   */\n  pagingDotsIndices: number[];\n\n  /**\n   * Go to a specific slide\n   * @param targetIndex Index to go to\n   */\n  goToSlide: (targetIndex: number) => void;\n\n  /**\n   * Whether the \"next\" button should be disabled or not\n   */\n  nextDisabled: boolean;\n\n  /**\n   * Go to the next slide\n   */\n  nextSlide: () => void;\n\n  /**\n   * Whether the \"previous\" button should be disabled or not\n   */\n  previousDisabled: boolean;\n\n  /**\n   * Go to the previous slide\n   */\n  previousSlide: () => void;\n\n  /**\n   * Total number of slides\n   */\n  slideCount: number;\n}\n\nexport type RenderControlFunctionNames =\n  | 'renderTopLeftControls'\n  | 'renderTopCenterControls'\n  | 'renderTopRightControls'\n  | 'renderCenterLeftControls'\n  | 'renderCenterCenterControls'\n  | 'renderCenterRightControls'\n  | 'renderBottomLeftControls'\n  | 'renderBottomCenterControls'\n  | 'renderBottomRightControls';\n\n/**\n * A function to override what to render on an edge/corner of the modal.\n *\n * Pass in null to not render the default controls on an edge.\n */\ntype RenderControls = ((props: ControlProps) => ReactNode) | null;\n\n/**\n * Animation easing function accepting a normalized time between 0 and 1,\n * inclusive, and returning an eased time, which equals 0 at normalizedTime==0\n * and equals 1 at normalizedTime==1\n */\nexport type EasingFunction = (normalizedTime: number) => number;\n\nexport interface InternalCarouselProps {\n  /**\n   * If it's set to true, the carousel will adapt its height to the visible slides.\n   */\n  adaptiveHeight: boolean;\n\n  /**\n   * Whether to smoothly transition the height of the frame when using\n   * `adaptiveHeight`.\n   * @default true\n   */\n  adaptiveHeightAnimation: boolean;\n\n  /**\n   * Hook to be called after a slide is changed\n   * @param index Index of the current slide\n   */\n  afterSlide: (index: number) => void;\n\n  /**\n   * Adds a zoom or fade effect on the currently visible slide.\n   */\n  animation?: 'zoom' | 'fade';\n\n  /**\n   * Autoplay mode active\n   * @default false\n   */\n  autoplay: boolean;\n\n  /**\n   * Interval for autoplay iteration (ms)\n   * @default 3000\n   */\n  autoplayInterval: number;\n\n  /**\n   * Autoplay cycles through slide indexes in reverse\n   * @default false\n   */\n  autoplayReverse: boolean;\n\n  /**\n   * Hook to be called before a slide is changed\n   * @param currentSlide Index of the current slide\n   * @param endSlide Index of the last slide\n   */\n  beforeSlide: (currentSlideIndex: number, endSlideIndex: number) => void;\n\n  /**\n   * When displaying more than one slide,\n   * sets which position to anchor the current slide to\n   */\n  cellAlign: CellAlign;\n\n  /**\n   * Space between slides, as an integer, but reflected as px\n   */\n  cellSpacing: number;\n\n  /**\n   * Explicit children prop to resolve issue with @types/react v18\n   */\n  children: ReactNode | ReactNode[];\n\n  /**\n   * Additional className\n   */\n  className?: string;\n\n  /**\n   * This prop lets you apply custom classes and styles to the default Next, Previous, and Paging Dots controls\n   */\n  defaultControlsConfig: DefaultControlsConfig;\n\n  /**\n   * Disable slides animation\n   * @default false\n   */\n  disableAnimation: boolean;\n\n  /**\n   * Disable swipe before first slide and after last slide\n   * @default false\n   */\n  disableEdgeSwiping: boolean;\n\n  /**\n   * Enable mouse swipe/dragging\n   */\n  dragging: boolean;\n\n  /**\n   * The percentage (from 0 to 1) of a slide that the user needs to drag before\n   * @default `0.5`\n   */\n  dragThreshold: number;\n\n  /**\n   * Animation easing function\n   */\n  easing: EasingFunction;\n\n  /**\n   * Animation easing function when swipe exceeds edge\n   */\n  edgeEasing: EasingFunction;\n\n  /**\n   * When set to true, disable keyboard controls\n   * @default false\n   */\n  enableKeyboardControls: boolean;\n\n  /**\n   * Customize the aria-label of the frame container of the carousel. This is useful when you have more than one carousel on the page.\n   */\n  frameAriaLabel?: string;\n\n  /**\n   * When enableKeyboardControls is enabled, Configure keyCodes for corresponding slide actions as array of keyCodes\n   */\n  keyCodeConfig: KeyCodeConfig;\n\n  /**\n   * optional callback function\n   */\n  onDragStart: (\n    e: React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>\n  ) => void;\n\n  /**\n   * optional callback function\n   */\n  onDrag: (\n    e: React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>\n  ) => void;\n\n  /**\n   * optional callback function\n   */\n  onDragEnd: (\n    e: React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>\n  ) => void;\n\n  /**\n   * Callback called when user-triggered navigation occurs: dragging/swiping,\n   * clicking one of the controls (custom controls not included), or using a\n   * keyboard shortcut\n   */\n  onUserNavigation: (\n    e: React.TouchEvent | React.MouseEvent | React.KeyboardEvent\n  ) => void;\n\n  /**\n   * Pause autoPlay when mouse is over carousel\n   * @default true\n   */\n  pauseOnHover: boolean;\n\n  /**\n   * Function for rendering aria-live announcement messages\n   */\n  renderAnnounceSlideMessage: RenderAnnounceSlideMessage;\n\n  /**\n   * Function for rendering bottom center control\n   */\n  renderBottomCenterControls: RenderControls;\n\n  /**\n   * Function for rendering bottom left control\n   */\n  renderBottomLeftControls?: RenderControls;\n\n  /**\n   * Function for rendering bottom right control\n   */\n  renderBottomRightControls?: RenderControls;\n\n  /**\n   * Function for rendering center center control\n   */\n  renderCenterCenterControls?: RenderControls;\n\n  /**\n   * Function for rendering center left control\n   */\n  renderCenterLeftControls: RenderControls;\n\n  /**\n   * Function for rendering center right control\n   */\n  renderCenterRightControls: RenderControls;\n\n  /**\n   * Function for rendering top center control\n   */\n  renderTopCenterControls?: RenderControls;\n\n  /**\n   * Function for rendering top left control\n   */\n  renderTopLeftControls?: RenderControls;\n\n  /**\n   * Function for rendering top right control\n   */\n  renderTopRightControls?: RenderControls;\n\n  /**\n   * Supports 'page' and 'remainder' scroll modes.\n   */\n  scrollMode: ScrollMode;\n\n  /**\n   * Manually set the index of the initial slide to be shown\n   */\n  slideIndex?: number;\n\n  /**\n   * Slides to scroll at once.\n   */\n  slidesToScroll: number | 'auto';\n\n  /**\n   * Slides to show at once\n   */\n  slidesToShow: number;\n\n  /**\n   * Sets a fixed slide width\n   */\n  slideWidth?: CSSProperties['width'];\n\n  /**\n   * Animation duration\n   */\n  speed: number;\n\n  /**\n   * style object\n   */\n  style: CSSProperties;\n\n  /**\n   * Enable touch swipe/dragging\n   */\n  swiping: boolean;\n\n  /**\n   * Not migrated yet\n   *\n   * Enable the slides to transition vertically\n   */\n  vertical: boolean;\n\n  /**\n   * Used to remove all controls at once. Overwrites the render[Top, Right, Bottom, Left]CenterControls()\n   * @default false\n   */\n  withoutControls: boolean;\n\n  /**\n   * Sets infinite wrapAround mode\n   * @default false\n   */\n  wrapAround: boolean;\n\n  /**\n   * Adds a number value to set the scale of zoom when animation === \"zoom\".\n   * The number value should be set in a range of (0,1).\n   * @default 0.85\n   */\n  zoomScale?: number;\n}\n\n/**\n * This component has no required props.\n */\nexport type CarouselProps = Partial<InternalCarouselProps>;\n","import { getDotIndexes } from './default-controls';\nimport { CellAlign, ScrollMode } from './types';\n\nexport const getNextMoveIndex = (\n  scrollMode: ScrollMode,\n  wrapAround: boolean,\n  currentSlide: number,\n  slideCount: number,\n  slidesToScroll: number,\n  slidesToShow: number,\n  cellAlign: CellAlign\n) => {\n  if (wrapAround) {\n    return currentSlide + slidesToScroll;\n  }\n  // Quit early if we're already as far right as we can go\n  if (\n    currentSlide >= slideCount - 1 ||\n    (cellAlign === 'left' && currentSlide >= slideCount - slidesToShow)\n  ) {\n    return currentSlide;\n  }\n\n  if (scrollMode === ScrollMode.remainder && cellAlign === 'left') {\n    return Math.min(currentSlide + slidesToScroll, slideCount - slidesToShow);\n  }\n\n  return Math.min(currentSlide + slidesToScroll, slideCount - 1);\n};\n\nexport const getPrevMoveIndex = (\n  scrollMode: ScrollMode,\n  wrapAround: boolean,\n  currentSlide: number,\n  slidesToScroll: number,\n  slidesToShow: number,\n  cellAlign: CellAlign\n) => {\n  if (wrapAround) {\n    return currentSlide - slidesToScroll;\n  }\n\n  // Quit early if we're already as far left as we can go\n  if (\n    currentSlide <= 0 ||\n    (cellAlign === 'right' && currentSlide <= slidesToShow - 1)\n  ) {\n    return currentSlide;\n  }\n\n  if (scrollMode === ScrollMode.remainder && cellAlign === 'right') {\n    return Math.max(currentSlide - slidesToScroll, slidesToShow - 1);\n  }\n\n  return Math.max(currentSlide - slidesToScroll, 0);\n};\n\nexport const getDefaultSlideIndex = (\n  slideIndex: number | undefined,\n  slideCount: number,\n  slidesToShow: number,\n  slidesToScroll: number,\n  cellAlign: CellAlign,\n  autoplayReverse: boolean,\n  scrollMode: ScrollMode\n) => {\n  if (slideIndex !== undefined) {\n    return slideIndex;\n  }\n\n  const dotIndexes = getDotIndexes(\n    slideCount,\n    slidesToScroll,\n    scrollMode,\n    slidesToShow,\n    false,\n    cellAlign\n  );\n\n  return autoplayReverse ? dotIndexes[dotIndexes.length - 1] : dotIndexes[0];\n};\n\n/**\n * Boils down an unbounded index (-Infinity < index < Infinity) to a bounded one\n * (0 ≤ index < slideCount)\n */\nexport const getBoundedIndex = (rawIndex: number, slideCount: number) => {\n  return ((rawIndex % slideCount) + slideCount) % slideCount;\n};\n","import { useEffect, useState, useRef } from 'react';\nimport { EasingFunction } from 'src/types';\n\n/**\n * Provides an interpolated value, beginning at 0 and ending at 1, based on a\n * provided duration and animation timing function.\n */\nexport const useTween = (\n  durationMs: number,\n  easingFunction: EasingFunction,\n  // navigationNum is an combination of numbers that are stable when the\n  // animation should not be running or should continue running, but change when\n  // the animation should start running. In practice, this is a combination of\n  // the animation distance and slide index.\n  navigationNum: number,\n  shouldInterrupt: boolean\n) => {\n  const [normalizedTimeRaw, setNormalizedTime] = useState(1);\n  const startTime = useRef(Date.now());\n  const rAF = useRef<number | undefined>();\n  const isFirstRender = useRef(true);\n  const lastNavigationNum = useRef<number | null>(null);\n\n  // Detect on the first render following navigation if the animation should\n  // be running. If we wait for the useEffect, the first render will flash with\n  // the slide in its destination position, before the animation triggers,\n  // sending it back to the position of the first frame of the animation. This\n  // approach is done in place of a useLayoutEffect, which has issues with SSR.\n  const normalizedTime =\n    lastNavigationNum.current === null ||\n    lastNavigationNum.current === navigationNum ||\n    shouldInterrupt\n      ? normalizedTimeRaw\n      : 0; // 0 here indicates the animation has begun\n\n  useEffect(() => {\n    lastNavigationNum.current = navigationNum;\n\n    // Skip the first render as we don't want to trigger the animation right off\n    // the bat\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    if (shouldInterrupt) {\n      return;\n    }\n\n    startTime.current = Date.now();\n    setNormalizedTime(0);\n\n    const tick = () => {\n      rAF.current = requestAnimationFrame(() => {\n        const currentTime = Date.now();\n        const normalizedTime = Math.min(\n          1,\n          (currentTime - startTime.current) / durationMs\n        );\n        setNormalizedTime(normalizedTime);\n\n        if (normalizedTime < 1) {\n          tick();\n        } else {\n          // Clean up so we can use this value to determine if the most recent\n          // animation completed\n          rAF.current = undefined;\n        }\n      });\n    };\n    tick();\n\n    return () => {\n      // If the most recent animation did not complete, cut it short and reset\n      // the animation\n      if (rAF.current !== undefined) {\n        cancelAnimationFrame(rAF.current);\n        setNormalizedTime(1);\n      }\n    };\n  }, [navigationNum, durationMs, shouldInterrupt]);\n\n  return {\n    isAnimating: normalizedTime !== 1,\n    value: easingFunction(normalizedTime),\n  };\n};\n","import React, { Fragment } from 'react';\nimport { getControlContainerStyles } from './control-styles';\nimport {\n  getDotIndexes,\n  nextButtonDisabled,\n  prevButtonDisabled,\n} from './default-controls';\nimport {\n  InternalCarouselProps,\n  Positions,\n  RenderControlFunctionNames,\n} from './types';\n\ntype ControlMap = { funcName: RenderControlFunctionNames; key: Positions }[];\nconst controlsMap: ControlMap = [\n  { funcName: 'renderTopLeftControls', key: Positions.TopLeft },\n  { funcName: 'renderTopCenterControls', key: Positions.TopCenter },\n  { funcName: 'renderTopRightControls', key: Positions.TopRight },\n  { funcName: 'renderCenterLeftControls', key: Positions.CenterLeft },\n  { funcName: 'renderCenterCenterControls', key: Positions.CenterCenter },\n  { funcName: 'renderCenterRightControls', key: Positions.CenterRight },\n  { funcName: 'renderBottomLeftControls', key: Positions.BottomLeft },\n  { funcName: 'renderBottomCenterControls', key: Positions.BottomCenter },\n  { funcName: 'renderBottomRightControls', key: Positions.BottomRight },\n];\n\nconst renderControls = (\n  props: InternalCarouselProps,\n  slideCount: number,\n  currentSlide: number,\n  goToSlide: (targetSlideIndex: number) => void,\n  nextSlide: () => void,\n  prevSlide: () => void,\n  slidesToScroll: number\n): React.ReactElement[] | null => {\n  if (props.withoutControls) {\n    return null;\n  }\n\n  const disableCheckProps = {\n    ...props,\n    currentSlide,\n    slideCount,\n  };\n  const nextDisabled = nextButtonDisabled(disableCheckProps);\n  const previousDisabled = prevButtonDisabled(disableCheckProps);\n  const pagingDotsIndices = getDotIndexes(\n    slideCount,\n    slidesToScroll,\n    props.scrollMode,\n    props.slidesToShow,\n    props.wrapAround,\n    props.cellAlign\n  );\n\n  return controlsMap.map((control) => {\n    if (\n      !props[control.funcName] ||\n      typeof props[control.funcName] !== 'function'\n    ) {\n      return <Fragment key={control.funcName} />;\n    }\n    return (\n      <div\n        key={control.funcName}\n        style={{\n          ...getControlContainerStyles(control.key),\n          pointerEvents: 'none',\n        }}\n      >\n        <div\n          className={[\n            `slider-control-${control.key.toLowerCase()}`,\n            props.defaultControlsConfig.containerClassName || '',\n          ]\n            .join(' ')\n            .trim()}\n          // The container has `pointerEvents: 'none'` so we need to override\n          // that to make sure the controls are clickable.\n          style={{ pointerEvents: 'auto' }}\n        >\n          {props[control.funcName]?.({\n            cellAlign: props.cellAlign,\n            cellSpacing: props.cellSpacing,\n            currentSlide,\n            defaultControlsConfig: props.defaultControlsConfig || {},\n            pagingDotsIndices,\n            goToSlide,\n            nextDisabled,\n            nextSlide,\n            onUserNavigation: props.onUserNavigation,\n            previousDisabled,\n            previousSlide: prevSlide,\n            scrollMode: props.scrollMode,\n            slideCount,\n            slidesToScroll,\n            slidesToShow: props.slidesToShow || 1,\n            vertical: props.vertical,\n            wrapAround: props.wrapAround,\n          })}\n        </div>\n      </div>\n    );\n  });\n};\n\nexport default renderControls;\n","import { CSSProperties } from 'react';\nimport { Positions } from './types';\n\nconst commonStyles: CSSProperties = {\n  position: 'absolute',\n  display: 'flex',\n  zIndex: 1,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n};\n\n/**\n * Gets flexbox alignment and justify-content styles for a given position.\n */\nconst getControlContainerFlexStyles = (pos: Positions): CSSProperties => {\n  let alignItems: CSSProperties['alignItems'];\n\n  switch (pos) {\n    case Positions.TopLeft:\n    case Positions.TopCenter:\n    case Positions.TopRight:\n      alignItems = 'flex-start';\n      break;\n    case Positions.CenterLeft:\n    case Positions.CenterCenter:\n    case Positions.CenterRight:\n      alignItems = 'center';\n      break;\n    case Positions.BottomLeft:\n    case Positions.BottomCenter:\n    case Positions.BottomRight:\n      alignItems = 'flex-end';\n      break;\n  }\n\n  let justifyContent: CSSProperties['justifyContent'];\n  switch (pos) {\n    case Positions.TopLeft:\n    case Positions.CenterLeft:\n    case Positions.BottomLeft:\n      justifyContent = 'flex-start';\n      break;\n    case Positions.TopCenter:\n    case Positions.CenterCenter:\n    case Positions.BottomCenter:\n      justifyContent = 'center';\n      break;\n    case Positions.TopRight:\n    case Positions.CenterRight:\n    case Positions.BottomRight:\n      justifyContent = 'flex-end';\n      break;\n  }\n\n  return { alignItems, justifyContent };\n};\n\n/**\n * Gets the styles for a back/forward control container to align the control\n * properly within the parent.\n */\nexport const getControlContainerStyles = (pos: Positions): CSSProperties => {\n  return { ...getControlContainerFlexStyles(pos), ...commonStyles };\n};\n","import React from 'react';\nimport { InternalCarouselProps, ControlProps, ScrollMode } from './types';\nimport { NextButton, PagingDots, PreviousButton } from './default-controls';\nimport { defaultRenderAnnounceSlideMessage } from './announce-slide';\n\nconst easeOut = (t: number) => (t - 1) ** 3 + 1;\n\nconst defaultProps: InternalCarouselProps = {\n  adaptiveHeight: false,\n  adaptiveHeightAnimation: true,\n  afterSlide: () => {\n    // do nothing\n  },\n  autoplay: false,\n  autoplayInterval: 3000,\n  autoplayReverse: false,\n  beforeSlide: () => {\n    // do nothing\n  },\n  cellAlign: 'left',\n  cellSpacing: 0,\n  defaultControlsConfig: {},\n  disableAnimation: false,\n  disableEdgeSwiping: false,\n  dragging: true,\n  dragThreshold: 0.5,\n  easing: easeOut,\n  edgeEasing: easeOut,\n  enableKeyboardControls: false,\n  frameAriaLabel: 'carousel-slider',\n  keyCodeConfig: {\n    nextSlide: [39, 68, 38, 87],\n    previousSlide: [37, 65, 40, 83],\n    firstSlide: [81],\n    lastSlide: [69],\n    pause: [32],\n  },\n  onDragStart: () => {\n    // do nothing\n  },\n  onDrag: () => {\n    // do nothing\n  },\n  onDragEnd: () => {\n    // do nothing\n  },\n  onUserNavigation: () => {\n    // do nothing\n  },\n  pauseOnHover: true,\n  renderAnnounceSlideMessage: defaultRenderAnnounceSlideMessage,\n  renderBottomCenterControls: (props: ControlProps) => (\n    <PagingDots {...props} />\n  ),\n  renderCenterLeftControls: (props: ControlProps) => (\n    <PreviousButton {...props} />\n  ),\n  renderCenterRightControls: (props: ControlProps) => <NextButton {...props} />,\n  scrollMode: ScrollMode.page,\n  slidesToScroll: 1,\n  slidesToShow: 1,\n  speed: 500,\n  style: {},\n  swiping: true,\n  vertical: false,\n  withoutControls: false,\n  wrapAround: false,\n  children: <></>,\n};\n\nexport default defaultProps;\n","import { SlideHeight } from '../types';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useStateWithRef } from './use-state-with-ref';\n\n/**\n * The frame height is normally, just `auto` (i.e., it expands to fit the\n * items), but in adaptiveHeight mode, it's the height of the tallest visible\n * item.\n *\n * In adaptiveHeight mode, we also switch between two states to ensure that\n * slides don't render with zero height when server-side-rendering:\n *\n * - When initializedAdaptiveHeight is false: the frame has height auto; visible\n *   slides have height auto; invisible slides have height 0\n * - The client sets initializedAdaptiveHeight to true once we've measured all\n *   the visible slides' heights\n * - When initializedAdaptiveHeight is true: the frame has height set to the\n *   tallest visible slide; all slides have height 100%\n */\nexport const useFrameHeight = (\n  adaptiveHeight: boolean,\n  slidesToShow: number,\n  slideCount: number\n): {\n  /**\n   * Callback that can be passed to Slides to allow them to update the\n   * `visibleHeights` variable.\n   */\n  handleVisibleSlideHeightChange: (\n    slideIndex: number,\n    height: number | null\n  ) => unknown;\n\n  /** CSS height of the frame container */\n  frameHeight: string;\n\n  /**\n   * Whether we'd measured the initial slide heights and are ready for the\n   * frame to control the children's height, rather than the other way around.\n   */\n  initializedAdaptiveHeight: boolean;\n} => {\n  const [visibleHeights, setVisibleHeights, visibleHeightsRef] =\n    useStateWithRef<SlideHeight[]>([]);\n\n  // Whether we've received heights of all initial visible heights\n  const [initializedAdaptiveHeight, setInitializedAdaptiveHeight] =\n    useState(false);\n\n  const handleVisibleSlideHeightChange = useCallback(\n    (slideIndex: number, height: number | null) => {\n      // Use the ref's value since it's always the latest value\n      const latestVisibleHeights = visibleHeightsRef.current;\n      let newVisibleHeights: SlideHeight[];\n      if (height === null) {\n        newVisibleHeights = latestVisibleHeights.filter(\n          (slideHeight) => slideHeight.slideIndex !== slideIndex\n        );\n      } else {\n        newVisibleHeights = [...latestVisibleHeights, { slideIndex, height }];\n      }\n      setVisibleHeights(newVisibleHeights);\n\n      if (\n        newVisibleHeights.length >=\n        Math.min(slideCount, Math.ceil(slidesToShow))\n      ) {\n        setInitializedAdaptiveHeight(true);\n      }\n    },\n    [slideCount, setVisibleHeights, slidesToShow, visibleHeightsRef]\n  );\n\n  const frameHeight = useMemo(() => {\n    if (adaptiveHeight) {\n      // We want server-side-rendering to render the carousel with non-zero\n      // height. to achieve this, we first set the height to `auto` until\n      // we've received the heights of the visible slides. Then, we switch to\n      // a mode where the frame controls the height.\n      if (!initializedAdaptiveHeight) {\n        return 'auto';\n      }\n\n      const maxHeight = Math.max(\n        0,\n        ...visibleHeights.map((height) => height.height)\n      );\n      return `${maxHeight}px`;\n    } else {\n      return 'auto';\n    }\n  }, [adaptiveHeight, initializedAdaptiveHeight, visibleHeights]);\n\n  return {\n    handleVisibleSlideHeightChange,\n    frameHeight,\n    initializedAdaptiveHeight,\n  };\n};\n","import { MutableRefObject, useCallback, useRef, useState } from 'react';\n\n/**\n * Like useState, but also returns a ref that's always instantly updated.\n *\n * This is useful in two cases:\n *\n * 1. You need to both force a re-render when a variable changes, and\n *    also avoid re-running side effects (for example, a network call), even\n *    before the state fully updates for the component.\n * 2. Multiple callbacks need to modify the same object or array before the\n *    state updates. For example, if one callback tries to append 4 to\n *    `[1, 2, 3]` and another tries to append 5, we may end up with only\n *    `[1, 2, 3, 5]` instead of `[1, 2, 3, 4, 5]`\n */\nexport const useStateWithRef = <S>(\n  initialState: S\n): [S, (newValue: S) => void, MutableRefObject<S>] => {\n  const [value, setValue] = useState(initialState);\n  // Need to explicitly type this out, or the overloads can confuse the\n  // compiler to think that this might be a React Component ref\n  const valueRef = useRef<S>(initialState) as MutableRefObject<S>;\n\n  const setValueAndRef = useCallback((newValue: S) => {\n    valueRef.current = newValue;\n    setValue(newValue);\n  }, []);\n\n  return [value, setValueAndRef, valueRef];\n};\n","import { useEffect, useRef, ForwardedRef } from 'react';\n\nexport const useForwardRef = <T>(ref: ForwardedRef<T>) => {\n  const targetRef = useRef<T>(null);\n\n  useEffect(() => {\n    if (!ref) return;\n\n    if (typeof ref === 'function') {\n      ref(targetRef.current);\n    } else {\n      ref.current = targetRef.current;\n    }\n  }, [ref]);\n\n  return targetRef;\n};\n"]},"metadata":{},"sourceType":"module"}